
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_Standard(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		 reg    [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire RxD;
reg seg7_disp_off_signal;

parameter storage_length = 18;
reg transmit;
wire transmit_debounced;
wire tick;
wire [7:0] receive_data;
//reg [7:0] count_value;
wire receive_done;
wire [7:0] mem_data;
reg [9:0] mem_address;
reg [9:0] written_mem_address;
reg mem_wr;
reg first_val_receive;
reg txdone_flag;
reg [7:0] pixels_tree1[storage_length-1:0];
reg [7:0] Label_tree_1;
wire [7:0] Label;
reg [7:0] serial_transmit_reg;
reg Allpixel_receive_complete;
reg [15:0] state_tree1;
reg [15:0] state_tree2;
reg [15:0] state_tree3;
reg ml_inference_completed_tree1;


reg [214:0] key1;
initial key1 = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};

//=======================================================
//  Structural coding
//=======================================================


Binary_To_7Segment seg1 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label_tree_1[3:0] : mem_address[3:0]),  .o_Segment_A(HEX0[0]), .o_Segment_B(HEX0[1]),  .o_Segment_C(HEX0[2]), 
                          .o_Segment_D(HEX0[3]), .o_Segment_E(HEX0[4]), .o_Segment_F(HEX0[5]), .o_Segment_G(HEX0[6]));
								  
Binary_To_7Segment seg2 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label_tree_2 : mem_address[7:4]),  .o_Segment_A(HEX1[0]), .o_Segment_B(HEX1[1]),  .o_Segment_C(HEX1[2]), 
                          .o_Segment_D(HEX1[3]), .o_Segment_E(HEX1[4]), .o_Segment_F(HEX1[5]), .o_Segment_G(HEX1[6]));
								  
Binary_To_7Segment seg3 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label_tree_3 : mem_address[9:8]),  .o_Segment_A(HEX2[0]), .o_Segment_B(HEX2[1]),  .o_Segment_C(HEX2[2]), 
                          .o_Segment_D(HEX2[3]), .o_Segment_E(HEX2[4]), .o_Segment_F(HEX2[5]), .o_Segment_G(HEX2[6]));
								  
								  
Binary_To_7Segment seg4 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? 4'b1011 : written_mem_address[3:0]),  .o_Segment_A(HEX3[0]), .o_Segment_B(HEX3[1]),  .o_Segment_C(HEX3[2]), 
                          .o_Segment_D(HEX3[3]), .o_Segment_E(HEX3[4]), .o_Segment_F(HEX3[5]), .o_Segment_G(HEX3[6]));
								  
Binary_To_7Segment seg5 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? 4'b1010 : written_mem_address[7:4]),  .o_Segment_A(HEX4[0]), .o_Segment_B(HEX4[1]),  .o_Segment_C(HEX4[2]), 
                          .o_Segment_D(HEX4[3]), .o_Segment_E(HEX4[4]), .o_Segment_F(HEX4[5]), .o_Segment_G(HEX4[6]));
								  
Binary_To_7Segment seg6 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? 4'b0001 : written_mem_address[9:8]),  .o_Segment_A(HEX5[0]), .o_Segment_B(HEX5[1]),  .o_Segment_C(HEX5[2]), 
                          .o_Segment_D(HEX5[3]), .o_Segment_E(HEX5[4]), .o_Segment_F(HEX5[5]), .o_Segment_G(HEX5[6]));

					  
								  
assign RxD = GPIO[0];  //UART receiver pin for FPGA
// GPIO[1];  //UART transmitter Pin for FPGA


uart_rx R3 (.i_Clock(CLOCK_50), .i_Rx_Serial(RxD), .o_Rx_DV(receive_done), .o_Rx_Byte(receive_data) );

always @ (posedge receive_done)
begin
      if (SW[0] == 1)    begin LEDR[1] <= 0; end
      else begin LEDR[1] <= ~LEDR[1]; end
end

always @ (posedge CLOCK_50)
begin
    if (receive_done == 1)
        begin
        mem_address <= mem_address+1;   written_mem_address <= mem_address; 
        pixels_tree1[mem_address] <= receive_data;
        if (mem_address >= storage_length-1)
        begin Allpixel_receive_complete <=1; end
        else
        begin Allpixel_receive_complete <=0; end
        end
            
     if (SW[0] == 1)
         begin
            mem_address <= 0;
				seg7_disp_off_signal <=0;
         end
     
     if (tick == 1)
         begin
           if (txdone_flag == 0 )
               begin
                    txdone_flag <= 1;
               end
           else 
               begin
                    mem_address <= mem_address+1;
                    txdone_flag <= 0;
               end              
         end
     
     if (mem_address < written_mem_address && SW[1]== 1)
     begin
        transmit <= 1;    
        serial_transmit_reg <= pixels_tree1[mem_address];    
     end
     else if (mem_address == written_mem_address && SW[1]== 1)
     begin 
        transmit <= 1;   
        serial_transmit_reg <= Label;    
     end
     else
     begin
        transmit <=0; 
     end 
	  
	  if (SW[2] == 1)
         begin
				seg7_disp_off_signal <= 1;
         end
end

uart_tx T1 (.i_Clock(CLOCK_50), .i_Tx_DV(transmit), .i_Tx_Byte(serial_transmit_reg), .o_Tx_Active(), .o_Tx_Serial(GPIO[1]), .o_Tx_Done(tick) );

assign Label = Label_tree_1;

always @ (posedge CLOCK_50)
    begin
    if (SW[0] == 1)
         begin
            state_tree1 <= 0;
         end
         
    if (Allpixel_receive_complete==1)
        begin
 case (state_tree1)        


16'd0:if ((pixels_tree1[10] <= 699) ~^ key1[0]) begin state_tree1<=1; end  else begin state_tree1<=112; end 
 
16'd1:if ((pixels_tree1[15] <= 793) ~^ key1[1]) begin state_tree1<=2; end  else begin state_tree1<=61; end 
 
16'd2:if ((pixels_tree1[16] <= 739) ^ key1[2]) begin state_tree1<=3; end  else begin state_tree1<=34; end 
 
16'd3:if ((pixels_tree1[10] <= 179) ^ key1[3]) begin state_tree1<=4; end  else begin state_tree1<=19; end 
 
16'd4:if ((pixels_tree1[16] <= 707) ^ key1[4]) begin state_tree1<=5; end  else begin state_tree1<=12; end 
 
16'd5:if ((pixels_tree1[3] <= 2) ^ key1[5]) begin state_tree1<=6; end  else begin state_tree1<=9; end 
 
16'd6:if ((pixels_tree1[14] <= 518) ^ key1[6]) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd9:if ((pixels_tree1[13] <= 616) ~^ key1[7]) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd12:if ((pixels_tree1[17] <= 796) ~^ key1[8]) begin state_tree1<=13; end  else begin state_tree1<=16; end 
 
16'd13:if ((pixels_tree1[14] <= 493) ~^ key1[9]) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd16:if (pixels_tree1[2] <= 0)  begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd19:if ((pixels_tree1[8] <= 499) ^ key1[11]) begin state_tree1<=20; end  else begin state_tree1<=27; end 
 
16'd20:if ((pixels_tree1[6] <= 357) ~^ key1[12]) begin state_tree1<=21; end  else begin state_tree1<=24; end 
 
16'd21:if (pixels_tree1[10] <= 640)  begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd24:if ((pixels_tree1[17] <= 789) ^ key1[14]) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd27:if ((pixels_tree1[11] <= 796) ~^ key1[15]) begin state_tree1<=28; end  else begin state_tree1<=31; end 
 
16'd28:if (pixels_tree1[10] <= 680)  begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd31:if ((pixels_tree1[10] <= 681) ^ key1[17]) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd34:if ((pixels_tree1[9] <= 164) ~^ key1[18]) begin state_tree1<=35; end  else begin state_tree1<=50; end 
 
16'd35:if (pixels_tree1[13] <= 618)  begin state_tree1<=36; end  else begin state_tree1<=43; end 
 
16'd36:if ((pixels_tree1[12] <= 533) ~^ key1[20]) begin state_tree1<=37; end  else begin state_tree1<=40; end 
 
16'd37:if ((pixels_tree1[8] <= 504) ~^ key1[21]) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd40:if ((pixels_tree1[8] <= 504) ~^ key1[22]) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd43:if ((pixels_tree1[14] <= 520) ~^ key1[23]) begin state_tree1<=44; end  else begin state_tree1<=47; end 
 
16'd44:if (pixels_tree1[13] <= 627)  begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd47:if ((pixels_tree1[8] <= 473) ~^ key1[25]) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd50:if ((pixels_tree1[9] <= 549) ~^ key1[26]) begin state_tree1<=51; end  else begin state_tree1<=58; end 
 
16'd51:if ((pixels_tree1[11] <= 705) ^ key1[27]) begin state_tree1<=52; end  else begin state_tree1<=55; end 
 
16'd52:if ((pixels_tree1[13] <= 624) ^ key1[28]) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd55:if ((pixels_tree1[13] <= 630) ~^ key1[29]) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd58:if (pixels_tree1[8] <= 428)  begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd61:if ((pixels_tree1[9] <= 216) ~^ key1[31]) begin state_tree1<=62; end  else begin state_tree1<=83; end 
 
16'd62:if ((pixels_tree1[0] <= 2) ^ key1[32]) begin state_tree1<=63; end  else begin state_tree1<=70; end 
 
16'd63:if ((pixels_tree1[12] <= 161) ^ key1[33]) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=65; end 

16'd65:if ((pixels_tree1[7] <= 405) ^ key1[34]) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=67; end 

16'd67:if ((pixels_tree1[6] <= 335) ~^ key1[35]) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd70:if ((pixels_tree1[12] <= 517) ^ key1[36]) begin state_tree1<=71; end  else begin state_tree1<=78; end 
 
16'd71:if ((pixels_tree1[6] <= 361) ~^ key1[37]) begin state_tree1<=72; end  else begin state_tree1<=75; end 
 
16'd72:if ((pixels_tree1[9] <= 72) ~^ key1[38]) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd75:if ((pixels_tree1[13] <= 608) ^ key1[39]) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd78:if ((pixels_tree1[10] <= 10) ~^ key1[40]) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=80; end 

16'd80:if ((pixels_tree1[16] <= 719) ~^ key1[41]) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd83:if (pixels_tree1[7] <= 473)  begin state_tree1<=84; end  else begin state_tree1<=99; end 
 
16'd84:if ((pixels_tree1[0] <= 2) ^ key1[43]) begin state_tree1<=85; end  else begin state_tree1<=92; end 
 
16'd85:if ((pixels_tree1[16] <= 741) ~^ key1[44]) begin state_tree1<=86; end  else begin state_tree1<=89; end 
 
16'd86:if ((pixels_tree1[17] <= 779) ~^ key1[45]) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd89:if ((pixels_tree1[10] <= 690) ^ key1[46]) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd92:if (pixels_tree1[12] <= 567)  begin state_tree1<=93; end  else begin state_tree1<=96; end 
 
16'd93:if ((pixels_tree1[11] <= 789) ^ key1[48]) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd96:if ((pixels_tree1[6] <= 400) ^ key1[49]) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd99:if ((pixels_tree1[8] <= 522) ^ key1[50]) begin state_tree1<=100; end  else begin state_tree1<=107; end 
 
16'd100:if ((pixels_tree1[0] <= 2) ^ key1[51]) begin state_tree1<=101; end  else begin state_tree1<=104; end 
 
16'd101:if ((pixels_tree1[11] <= 743) ^ key1[52]) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd104:if ((pixels_tree1[13] <= 616) ~^ key1[53]) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd107:if ((pixels_tree1[8] <= 611) ~^ key1[54]) begin state_tree1<=108; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd108:if ((pixels_tree1[12] <= 501) ^ key1[55]) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd112:if (pixels_tree1[7] <= 483)  begin state_tree1<=113; end  else begin state_tree1<=170; end 
 
16'd113:if ((pixels_tree1[5] <= 0) ~^ key1[57]) begin state_tree1<=114; end  else begin state_tree1<=141; end 
 
16'd114:if ((pixels_tree1[11] <= 695) ^ key1[58]) begin state_tree1<=115; end  else begin state_tree1<=128; end 
 
16'd115:if ((pixels_tree1[8] <= 497) ~^ key1[59]) begin state_tree1<=116; end  else begin state_tree1<=121; end 
 
16'd116:if ((pixels_tree1[12] <= 260) ^ key1[60]) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=118; end 

16'd118:if ((pixels_tree1[15] <= 754) ~^ key1[61]) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd121:if (pixels_tree1[9] <= 508)  begin state_tree1<=122; end  else begin state_tree1<=125; end 
 
16'd122:if ((pixels_tree1[11] <= 659) ^ key1[63]) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd125:if ((pixels_tree1[7] <= 468) ^ key1[64]) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd128:if (pixels_tree1[13] <= 610)  begin state_tree1<=129; end  else begin state_tree1<=136; end 
 
16'd129:if (pixels_tree1[6] <= 380)  begin state_tree1<=130; end  else begin state_tree1<=133; end 
 
16'd130:if ((pixels_tree1[9] <= 502) ^ key1[67]) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd133:if ((pixels_tree1[14] <= 306) ~^ key1[68]) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd136:if ((pixels_tree1[13] <= 624) ^ key1[69]) begin state_tree1<=137; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd137:if (pixels_tree1[8] <= 507)  begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd141:if ((pixels_tree1[9] <= 512) ~^ key1[71]) begin state_tree1<=142; end  else begin state_tree1<=157; end 
 
16'd142:if ((pixels_tree1[0] <= 0) ~^ key1[72]) begin state_tree1<=143; end  else begin state_tree1<=150; end 
 
16'd143:if ((pixels_tree1[16] <= 709) ^ key1[73]) begin state_tree1<=144; end  else begin state_tree1<=147; end 
 
16'd144:if (pixels_tree1[11] <= 685)  begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd147:if (pixels_tree1[10] <= 746)  begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd150:if ((pixels_tree1[14] <= 502) ~^ key1[76]) begin state_tree1<=151; end  else begin state_tree1<=154; end 
 
16'd151:if ((pixels_tree1[14] <= 497) ^ key1[77]) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd154:if ((pixels_tree1[10] <= 758) ^ key1[78]) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd157:if (pixels_tree1[13] <= 636)  begin state_tree1<=158; end  else begin state_tree1<=165; end 
 
16'd158:if ((pixels_tree1[14] <= 501) ~^ key1[80]) begin state_tree1<=159; end  else begin state_tree1<=162; end 
 
16'd159:if ((pixels_tree1[8] <= 461) ^ key1[81]) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd162:if ((pixels_tree1[6] <= 383) ~^ key1[82]) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd165:if (pixels_tree1[8] <= 480)  begin state_tree1<=166; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd166:if ((pixels_tree1[10] <= 768) ^ key1[84]) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd170:if ((pixels_tree1[8] <= 544) ^ key1[85]) begin state_tree1<=171; end  else begin state_tree1<=200; end 
 
16'd171:if ((pixels_tree1[7] <= 486) ^ key1[86]) begin state_tree1<=172; end  else begin state_tree1<=187; end 
 
16'd172:if ((pixels_tree1[13] <= 614) ^ key1[87]) begin state_tree1<=173; end  else begin state_tree1<=180; end 
 
16'd173:if ((pixels_tree1[11] <= 696) ^ key1[88]) begin state_tree1<=174; end  else begin state_tree1<=177; end 
 
16'd174:if ((pixels_tree1[11] <= 680) ^ key1[89]) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd177:if (pixels_tree1[13] <= 612)  begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd180:if ((pixels_tree1[16] <= 696) ^ key1[91]) begin state_tree1<=181; end  else begin state_tree1<=184; end 
 
16'd181:if ((pixels_tree1[5] <= 2) ^ key1[92]) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd184:if (pixels_tree1[13] <= 615)  begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd187:if ((pixels_tree1[13] <= 614) ~^ key1[94]) begin state_tree1<=188; end  else begin state_tree1<=195; end 
 
16'd188:if ((pixels_tree1[11] <= 810) ~^ key1[95]) begin state_tree1<=189; end  else begin state_tree1<=192; end 
 
16'd189:if ((pixels_tree1[7] <= 488) ~^ key1[96]) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd192:if ((pixels_tree1[17] <= 774) ^ key1[97]) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd195:if ((pixels_tree1[16] <= 667) ~^ key1[98]) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=197; end 

16'd197:if ((pixels_tree1[10] <= 703) ^ key1[99]) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd200:if ((pixels_tree1[8] <= 622) ^ key1[100]) begin state_tree1<=201; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd201:if ((pixels_tree1[16] <= 737) ~^ key1[101]) begin state_tree1<=202; end  else begin state_tree1<=209; end 
 
16'd202:if ((pixels_tree1[11] <= 726) ^ key1[102]) begin state_tree1<=203; end  else begin state_tree1<=206; end 
 
16'd203:if ((pixels_tree1[13] <= 612) ^ key1[103]) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd206:if (pixels_tree1[16] <= 731)  begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd209:if ((pixels_tree1[10] <= 753) ~^ key1[105]) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=211; end 

16'd211:if ((pixels_tree1[10] <= 784) ^ key1[106]) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

		 endcase
		  
 		  
        end
    end




endmodule

module Binary_To_7Segment 
  (
   input       i_Clk,
	input [3:0] i_Binary_Num,
   output      o_Segment_A,
   output      o_Segment_B,
   output      o_Segment_C,
   output      o_Segment_D,
   output      o_Segment_E,
   output      o_Segment_F,
   output      o_Segment_G
   );
 
  reg [6:0]    r_Hex_Encoding = 7'h00;
   
  // Purpose: Creates a case statement for all possible input binary numbers.
  // Drives r_Hex_Encoding appropriately for each input combination.
  // Encoding at https://www.fpga4student.com/2017/09/seven-segment-led-display-controller-basys3-fpga.html
  always @(posedge i_Clk)
    begin
      case (i_Binary_Num)
        4'b0000 : r_Hex_Encoding <= 7'b0000001;
        4'b0001 : r_Hex_Encoding <= 7'b1001111;
        4'b0010 : r_Hex_Encoding <= 7'b0010010;
        4'b0011 : r_Hex_Encoding <= 7'b0000110;
        4'b0100 : r_Hex_Encoding <= 7'b1001100;         
        4'b0101 : r_Hex_Encoding <= 7'b0100100;
        4'b0110 : r_Hex_Encoding <= 7'b0100000;
        4'b0111 : r_Hex_Encoding <= 7'b0001111;
        4'b1000 : r_Hex_Encoding <= 7'b0000000;
        4'b1001 : r_Hex_Encoding <= 7'b0000100; 
		  4'b1010 : r_Hex_Encoding <= 7'b0001000; //a
		  4'b1011 : r_Hex_Encoding <= 7'b1100000; //b
		  4'b1100 : r_Hex_Encoding <= 7'b0110001;  //c
		  4'b1101 : r_Hex_Encoding <= 7'b1000010;  //d
		  4'b1110 : r_Hex_Encoding <= 7'b0110000;  //e
		  4'b1111 : r_Hex_Encoding <= 7'b0111000;  //f
        default: r_Hex_Encoding = 7'b1111111;
      endcase
    end // always @ (posedge i_Clk)
 
  // r_Hex_Encoding[7] is unused
  assign o_Segment_A = r_Hex_Encoding[6];
  assign o_Segment_B = r_Hex_Encoding[5];
  assign o_Segment_C = r_Hex_Encoding[4];
  assign o_Segment_D = r_Hex_Encoding[3];
  assign o_Segment_E = r_Hex_Encoding[2];
  assign o_Segment_F = r_Hex_Encoding[1];
  assign o_Segment_G = r_Hex_Encoding[0];
 
endmodule // Binary_To_7Segment



//////////////////////////////////////////////////////////////////////
// File Downloaded from http://www.nandland.com
//////////////////////////////////////////////////////////////////////
// This file contains the UART Receiver.  This receiver is able to
// receive 8 bits of serial data, one start bit, one stop bit,
// and no parity bit.  When receive is complete o_rx_dv will be
// driven high for one clock cycle.
// https://www.nandland.com/vhdl/modules/module-uart-serial-port-rs232.html
// Set Parameter CLKS_PER_BIT as follows:
// CLKS_PER_BIT = (Frequency of i_Clock)/(Frequency of UART)
// Example: 50 MHz Clock, 921600 baud UART
// (50000000)/(921600) = 53
  
module uart_rx   #(parameter CLKS_PER_BIT = 53)
  (
   input        i_Clock,
   input        i_Rx_Serial,
   output       o_Rx_DV,
   output [7:0] o_Rx_Byte
   );
    
  parameter s_IDLE         = 3'b000;
  parameter s_RX_START_BIT = 3'b001;
  parameter s_RX_DATA_BITS = 3'b010;
  parameter s_RX_STOP_BIT  = 3'b011; 
  parameter s_CLEANUP      = 3'b100;
   
  reg           r_Rx_Data_R = 1'b1;
  reg           r_Rx_Data   = 1'b1;
   
  reg [7:0]     r_Clock_Count = 0;
  reg [2:0]     r_Bit_Index   = 0; //8 bits total
  reg [7:0]     r_Rx_Byte     = 0;
  reg           r_Rx_DV       = 0;
  reg [2:0]     r_SM_Main     = 0;
   
  // Purpose: Double-register the incoming data.
  // This allows it to be used in the UART RX Clock Domain.
  // (It removes problems caused by metastability)
  always @(posedge i_Clock)
    begin
      r_Rx_Data_R <= i_Rx_Serial;
      r_Rx_Data   <= r_Rx_Data_R;
    end
   
   
  // Purpose: Control RX state machine
  always @(posedge i_Clock)
    begin
       
      case (r_SM_Main)
        s_IDLE :
          begin
            r_Rx_DV       <= 1'b0;
            r_Clock_Count <= 0;
            r_Bit_Index   <= 0;
             
            if (r_Rx_Data == 1'b0)          // Start bit detected
              r_SM_Main <= s_RX_START_BIT;
            else
              r_SM_Main <= s_IDLE;
          end
         
        // Check middle of start bit to make sure it's still low
        s_RX_START_BIT :
          begin
            if (r_Clock_Count == (CLKS_PER_BIT-1)/2)
              begin
                if (r_Rx_Data == 1'b0)
                  begin
                    r_Clock_Count <= 0;  // reset counter, found the middle
                    r_SM_Main     <= s_RX_DATA_BITS;
                  end
                else
                  r_SM_Main <= s_IDLE;
              end
            else
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_START_BIT;
              end
          end // case: s_RX_START_BIT
         
         
        // Wait CLKS_PER_BIT-1 clock cycles to sample serial data
        s_RX_DATA_BITS :
          begin
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_DATA_BITS;
              end
            else
              begin
                r_Clock_Count          <= 0;
                r_Rx_Byte[r_Bit_Index] <= r_Rx_Data;
                 
                // Check if we have received all bits
                if (r_Bit_Index < 7)
                  begin
                    r_Bit_Index <= r_Bit_Index + 1;
                    r_SM_Main   <= s_RX_DATA_BITS;
                  end
                else
                  begin
                    r_Bit_Index <= 0;
                    r_SM_Main   <= s_RX_STOP_BIT;
                  end
              end
          end // case: s_RX_DATA_BITS
     
     
        // Receive Stop bit.  Stop bit = 1
        s_RX_STOP_BIT :
          begin
            // Wait CLKS_PER_BIT-1 clock cycles for Stop bit to finish
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_STOP_BIT;
              end
            else
              begin
                r_Rx_DV       <= 1'b1;
                r_Clock_Count <= 0;
                r_SM_Main     <= s_CLEANUP;
              end
          end // case: s_RX_STOP_BIT
     
        // Stay here 1 clock
        s_CLEANUP :
          begin
            r_SM_Main <= s_IDLE;
            r_Rx_DV   <= 1'b0;
          end
         
         
        default :
          r_SM_Main <= s_IDLE;
         
      endcase
    end   
   
  assign o_Rx_DV   = r_Rx_DV;
  assign o_Rx_Byte = r_Rx_Byte;
   
endmodule // uart_rx


//////////////////////////////////////////////////////////////////////
// File Downloaded from http://www.nandland.com
//////////////////////////////////////////////////////////////////////
// This file contains the UART Transmitter.  This transmitter is able
// to transmit 8 bits of serial data, one start bit, one stop bit,
// and no parity bit.  When transmit is complete o_Tx_done will be
// driven high for one clock cycle.
//
// Set Parameter CLKS_PER_BIT as follows:
// CLKS_PER_BIT = (Frequency of i_Clock)/(Frequency of UART)
// Example: 50 MHz Clock, 921600 baud UART
// (50000000)/(921600) = 53
  
module uart_tx 
  #(parameter CLKS_PER_BIT = 53)
  (
   input       i_Clock,
   input       i_Tx_DV,
   input [7:0] i_Tx_Byte, 
   output      o_Tx_Active,
   output reg  o_Tx_Serial,
   output      o_Tx_Done
   );
  
  parameter s_IDLE         = 3'b000;
  parameter s_TX_START_BIT = 3'b001;
  parameter s_TX_DATA_BITS = 3'b010;
  parameter s_TX_STOP_BIT  = 3'b011;
  parameter s_CLEANUP      = 3'b100;
   
  reg [2:0]    r_SM_Main     = 0;
  reg [7:0]    r_Clock_Count = 0;
  reg [2:0]    r_Bit_Index   = 0;
  reg [7:0]    r_Tx_Data     = 0;
  reg          r_Tx_Done     = 0;
  reg          r_Tx_Active   = 0;
     
  always @(posedge i_Clock)
    begin
       
      case (r_SM_Main)
        s_IDLE :
          begin
            o_Tx_Serial   <= 1'b1;         // Drive Line High for Idle
            r_Tx_Done     <= 1'b0;
            r_Clock_Count <= 0;
            r_Bit_Index   <= 0;
             
            if (i_Tx_DV == 1'b1)
              begin
                r_Tx_Active <= 1'b1;
                r_Tx_Data   <= i_Tx_Byte;
                r_SM_Main   <= s_TX_START_BIT;
              end
            else
              r_SM_Main <= s_IDLE;
          end // case: s_IDLE
         
         
        // Send out Start Bit. Start bit = 0
        s_TX_START_BIT :
          begin
            o_Tx_Serial <= 1'b0;
             
            // Wait CLKS_PER_BIT-1 clock cycles for start bit to finish
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_TX_START_BIT;
              end
            else
              begin
                r_Clock_Count <= 0;
                r_SM_Main     <= s_TX_DATA_BITS;
              end
          end // case: s_TX_START_BIT
         
         
        // Wait CLKS_PER_BIT-1 clock cycles for data bits to finish         
        s_TX_DATA_BITS :
          begin
            o_Tx_Serial <= r_Tx_Data[r_Bit_Index];
             
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_TX_DATA_BITS;
              end
            else
              begin
                r_Clock_Count <= 0;
                 
                // Check if we have sent out all bits
                if (r_Bit_Index < 7)
                  begin
                    r_Bit_Index <= r_Bit_Index + 1;
                    r_SM_Main   <= s_TX_DATA_BITS;
                  end
                else
                  begin
                    r_Bit_Index <= 0;
                    r_SM_Main   <= s_TX_STOP_BIT;
                  end
              end
          end // case: s_TX_DATA_BITS
         
         
        // Send out Stop bit.  Stop bit = 1
        s_TX_STOP_BIT :
          begin
            o_Tx_Serial <= 1'b1;
             
            // Wait CLKS_PER_BIT-1 clock cycles for Stop bit to finish
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_TX_STOP_BIT;
              end
            else
              begin
                r_Tx_Done     <= 1'b1;
                r_Clock_Count <= 0;
                r_SM_Main     <= s_CLEANUP;
                r_Tx_Active   <= 1'b0;
              end
          end // case: s_Tx_STOP_BIT
         
         
        // Stay here 1 clock
        s_CLEANUP :
          begin
            r_Tx_Done <= 1'b1;
            r_SM_Main <= s_IDLE;
          end
         
         
        default :
          r_SM_Main <= s_IDLE;
         
      endcase
    end
 
  assign o_Tx_Active = r_Tx_Active;
  assign o_Tx_Done   = r_Tx_Done;
   
endmodule

