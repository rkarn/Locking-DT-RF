
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_Standard(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		 reg    [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire RxD;
reg seg7_disp_off_signal;

parameter storage_length = 18;
reg transmit;
wire transmit_debounced;
wire tick;
wire [7:0] receive_data;
//reg [7:0] count_value;
wire receive_done;
wire [7:0] mem_data;
reg [9:0] mem_address;
reg [9:0] written_mem_address;
reg mem_wr;
reg first_val_receive;
reg txdone_flag;
reg [7:0] pixels_tree1[storage_length-1:0];
reg [7:0] pixels_tree2[storage_length-1:0];
reg [7:0] pixels_tree3[storage_length-1:0];
reg [7:0] Label_tree_1;
reg [7:0] Label_tree_2;
reg [7:0] Label_tree_3;
wire [7:0] Label;
reg [7:0] serial_transmit_reg;
reg Allpixel_receive_complete;
reg [15:0] state_tree1;
reg [15:0] state_tree2;
reg [15:0] state_tree3;
reg ml_inference_completed_tree1;
reg ml_inference_completed_tree2;
reg ml_inference_completed_tree3;

//=======================================================
//  Structural coding
//=======================================================


Binary_To_7Segment seg1 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label_tree_1[3:0] : mem_address[3:0]),  .o_Segment_A(HEX0[0]), .o_Segment_B(HEX0[1]),  .o_Segment_C(HEX0[2]), 
                          .o_Segment_D(HEX0[3]), .o_Segment_E(HEX0[4]), .o_Segment_F(HEX0[5]), .o_Segment_G(HEX0[6]));
								  
Binary_To_7Segment seg2 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label_tree_2 : mem_address[7:4]),  .o_Segment_A(HEX1[0]), .o_Segment_B(HEX1[1]),  .o_Segment_C(HEX1[2]), 
                          .o_Segment_D(HEX1[3]), .o_Segment_E(HEX1[4]), .o_Segment_F(HEX1[5]), .o_Segment_G(HEX1[6]));
								  
Binary_To_7Segment seg3 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label_tree_3 : mem_address[9:8]),  .o_Segment_A(HEX2[0]), .o_Segment_B(HEX2[1]),  .o_Segment_C(HEX2[2]), 
                          .o_Segment_D(HEX2[3]), .o_Segment_E(HEX2[4]), .o_Segment_F(HEX2[5]), .o_Segment_G(HEX2[6]));
								  
								  
Binary_To_7Segment seg4 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? 4'b1011 : written_mem_address[3:0]),  .o_Segment_A(HEX3[0]), .o_Segment_B(HEX3[1]),  .o_Segment_C(HEX3[2]), 
                          .o_Segment_D(HEX3[3]), .o_Segment_E(HEX3[4]), .o_Segment_F(HEX3[5]), .o_Segment_G(HEX3[6]));
								  
Binary_To_7Segment seg5 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? 4'b1010 : written_mem_address[7:4]),  .o_Segment_A(HEX4[0]), .o_Segment_B(HEX4[1]),  .o_Segment_C(HEX4[2]), 
                          .o_Segment_D(HEX4[3]), .o_Segment_E(HEX4[4]), .o_Segment_F(HEX4[5]), .o_Segment_G(HEX4[6]));
								  
Binary_To_7Segment seg6 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? 4'b0001 : written_mem_address[9:8]),  .o_Segment_A(HEX5[0]), .o_Segment_B(HEX5[1]),  .o_Segment_C(HEX5[2]), 
                          .o_Segment_D(HEX5[3]), .o_Segment_E(HEX5[4]), .o_Segment_F(HEX5[5]), .o_Segment_G(HEX5[6]));

					  
								  
assign RxD = GPIO[0];  //UART receiver pin for FPGA
// GPIO[1];  //UART transmitter Pin for FPGA


uart_rx R3 (.i_Clock(CLOCK_50), .i_Rx_Serial(RxD), .o_Rx_DV(receive_done), .o_Rx_Byte(receive_data) );

always @ (posedge receive_done)
begin
      if (SW[0] == 1)    begin LEDR[1] <= 0; end
      else begin LEDR[1] <= ~LEDR[1]; end
end

always @ (posedge CLOCK_50)
begin
    if (receive_done == 1)
        begin
        mem_address <= mem_address+1;   written_mem_address <= mem_address; 
        pixels_tree1[mem_address] <= receive_data;
		  pixels_tree2[mem_address] <= receive_data;
		  pixels_tree3[mem_address] <= receive_data;
        if (mem_address >= storage_length-1)
        begin Allpixel_receive_complete <=1; end
        else
        begin Allpixel_receive_complete <=0; end
        end
            
     if (SW[0] == 1)
         begin
            mem_address <= 0;
				seg7_disp_off_signal <=0;
         end
     
     if (tick == 1)
         begin
           if (txdone_flag == 0 )
               begin
                    txdone_flag <= 1;
               end
           else 
               begin
                    mem_address <= mem_address+1;
                    txdone_flag <= 0;
               end              
         end
     
     if (mem_address < written_mem_address && SW[1]== 1)
     begin
        transmit <= 1;    
        serial_transmit_reg <= pixels_tree1[mem_address];    
     end
     else if (mem_address == written_mem_address && SW[1]== 1)
     begin 
        transmit <= 1;   
        serial_transmit_reg <= Label;    
     end
     else
     begin
        transmit <=0; 
     end 
	  
	  if (SW[2] == 1)
         begin
				seg7_disp_off_signal <= 1;
         end
end

uart_tx T1 (.i_Clock(CLOCK_50), .i_Tx_DV(transmit), .i_Tx_Byte(serial_transmit_reg), .o_Tx_Active(), .o_Tx_Serial(GPIO[1]), .o_Tx_Done(tick) );

assign Label = (Label_tree_1 & Label_tree_2)  | (Label_tree_2 & Label_tree_3) | (Label_tree_3 & Label_tree_1);

always @ (posedge CLOCK_50)
    begin
    if (SW[0] == 1)
         begin
            state_tree1 <= 0;
				state_tree2 <= 0;
				state_tree3 <= 0;
         end
         
    if (Allpixel_receive_complete==1)
        begin
 case (state_tree1)        

16'd0:if (pixels_tree1[10] <= 699) begin state_tree1<=1; end  else begin state_tree1<=112; end 
 
16'd1:if (pixels_tree1[15] <= 793) begin state_tree1<=2; end  else begin state_tree1<=61; end 
 
16'd2:if (pixels_tree1[16] <= 739) begin state_tree1<=3; end  else begin state_tree1<=34; end 
 
16'd3:if (pixels_tree1[10] <= 179) begin state_tree1<=4; end  else begin state_tree1<=19; end 
 
16'd4:if (pixels_tree1[16] <= 707) begin state_tree1<=5; end  else begin state_tree1<=12; end 
 
16'd5:if (pixels_tree1[3] <= 2) begin state_tree1<=6; end  else begin state_tree1<=9; end 
 
16'd6:if (pixels_tree1[14] <= 518) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd9:if (pixels_tree1[13] <= 616) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd12:if (pixels_tree1[17] <= 796) begin state_tree1<=13; end  else begin state_tree1<=16; end 
 
16'd13:if (pixels_tree1[14] <= 493) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd16:if (pixels_tree1[2] <= 0) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd19:if (pixels_tree1[8] <= 499) begin state_tree1<=20; end  else begin state_tree1<=27; end 
 
16'd20:if (pixels_tree1[6] <= 357) begin state_tree1<=21; end  else begin state_tree1<=24; end 
 
16'd21:if (pixels_tree1[10] <= 640) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd24:if (pixels_tree1[17] <= 789) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd27:if (pixels_tree1[11] <= 796) begin state_tree1<=28; end  else begin state_tree1<=31; end 
 
16'd28:if (pixels_tree1[10] <= 680) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd31:if (pixels_tree1[10] <= 681) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd34:if (pixels_tree1[9] <= 164) begin state_tree1<=35; end  else begin state_tree1<=50; end 
 
16'd35:if (pixels_tree1[13] <= 618) begin state_tree1<=36; end  else begin state_tree1<=43; end 
 
16'd36:if (pixels_tree1[12] <= 533) begin state_tree1<=37; end  else begin state_tree1<=40; end 
 
16'd37:if (pixels_tree1[8] <= 504) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd40:if (pixels_tree1[8] <= 504) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd43:if (pixels_tree1[14] <= 520) begin state_tree1<=44; end  else begin state_tree1<=47; end 
 
16'd44:if (pixels_tree1[13] <= 627) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd47:if (pixels_tree1[8] <= 473) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd50:if (pixels_tree1[9] <= 549) begin state_tree1<=51; end  else begin state_tree1<=58; end 
 
16'd51:if (pixels_tree1[11] <= 705) begin state_tree1<=52; end  else begin state_tree1<=55; end 
 
16'd52:if (pixels_tree1[13] <= 624) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd55:if (pixels_tree1[13] <= 630) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd58:if (pixels_tree1[8] <= 428) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd61:if (pixels_tree1[9] <= 216) begin state_tree1<=62; end  else begin state_tree1<=83; end 
 
16'd62:if (pixels_tree1[0] <= 2) begin state_tree1<=63; end  else begin state_tree1<=70; end 
 
16'd63:if (pixels_tree1[12] <= 161) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=65; end 

16'd65:if (pixels_tree1[7] <= 405) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=67; end 

16'd67:if (pixels_tree1[6] <= 335) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd70:if (pixels_tree1[12] <= 517) begin state_tree1<=71; end  else begin state_tree1<=78; end 
 
16'd71:if (pixels_tree1[6] <= 361) begin state_tree1<=72; end  else begin state_tree1<=75; end 
 
16'd72:if (pixels_tree1[9] <= 72) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd75:if (pixels_tree1[13] <= 608) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd78:if (pixels_tree1[10] <= 10) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=80; end 

16'd80:if (pixels_tree1[16] <= 719) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd83:if (pixels_tree1[7] <= 473) begin state_tree1<=84; end  else begin state_tree1<=99; end 
 
16'd84:if (pixels_tree1[0] <= 2) begin state_tree1<=85; end  else begin state_tree1<=92; end 
 
16'd85:if (pixels_tree1[16] <= 741) begin state_tree1<=86; end  else begin state_tree1<=89; end 
 
16'd86:if (pixels_tree1[17] <= 779) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd89:if (pixels_tree1[10] <= 690) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd92:if (pixels_tree1[12] <= 567) begin state_tree1<=93; end  else begin state_tree1<=96; end 
 
16'd93:if (pixels_tree1[11] <= 789) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd96:if (pixels_tree1[6] <= 400) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd99:if (pixels_tree1[8] <= 522) begin state_tree1<=100; end  else begin state_tree1<=107; end 
 
16'd100:if (pixels_tree1[0] <= 2) begin state_tree1<=101; end  else begin state_tree1<=104; end 
 
16'd101:if (pixels_tree1[11] <= 743) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd104:if (pixels_tree1[13] <= 616) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd107:if (pixels_tree1[8] <= 611) begin state_tree1<=108; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd108:if (pixels_tree1[12] <= 501) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd112:if (pixels_tree1[7] <= 483) begin state_tree1<=113; end  else begin state_tree1<=170; end 
 
16'd113:if (pixels_tree1[5] <= 0) begin state_tree1<=114; end  else begin state_tree1<=141; end 
 
16'd114:if (pixels_tree1[11] <= 695) begin state_tree1<=115; end  else begin state_tree1<=128; end 
 
16'd115:if (pixels_tree1[8] <= 497) begin state_tree1<=116; end  else begin state_tree1<=121; end 
 
16'd116:if (pixels_tree1[12] <= 260) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=118; end 

16'd118:if (pixels_tree1[15] <= 754) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd121:if (pixels_tree1[9] <= 508) begin state_tree1<=122; end  else begin state_tree1<=125; end 
 
16'd122:if (pixels_tree1[11] <= 659) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd125:if (pixels_tree1[7] <= 468) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd128:if (pixels_tree1[13] <= 610) begin state_tree1<=129; end  else begin state_tree1<=136; end 
 
16'd129:if (pixels_tree1[6] <= 380) begin state_tree1<=130; end  else begin state_tree1<=133; end 
 
16'd130:if (pixels_tree1[9] <= 502) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd133:if (pixels_tree1[14] <= 306) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd136:if (pixels_tree1[13] <= 624) begin state_tree1<=137; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd137:if (pixels_tree1[8] <= 507) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd141:if (pixels_tree1[9] <= 512) begin state_tree1<=142; end  else begin state_tree1<=157; end 
 
16'd142:if (pixels_tree1[0] <= 0) begin state_tree1<=143; end  else begin state_tree1<=150; end 
 
16'd143:if (pixels_tree1[16] <= 709) begin state_tree1<=144; end  else begin state_tree1<=147; end 
 
16'd144:if (pixels_tree1[11] <= 685) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd147:if (pixels_tree1[10] <= 746) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd150:if (pixels_tree1[14] <= 502) begin state_tree1<=151; end  else begin state_tree1<=154; end 
 
16'd151:if (pixels_tree1[14] <= 497) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd154:if (pixels_tree1[10] <= 758) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd157:if (pixels_tree1[13] <= 636) begin state_tree1<=158; end  else begin state_tree1<=165; end 
 
16'd158:if (pixels_tree1[14] <= 501) begin state_tree1<=159; end  else begin state_tree1<=162; end 
 
16'd159:if (pixels_tree1[8] <= 461) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd162:if (pixels_tree1[6] <= 383) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd165:if (pixels_tree1[8] <= 480) begin state_tree1<=166; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd166:if (pixels_tree1[10] <= 768) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd170:if (pixels_tree1[8] <= 544) begin state_tree1<=171; end  else begin state_tree1<=200; end 
 
16'd171:if (pixels_tree1[7] <= 486) begin state_tree1<=172; end  else begin state_tree1<=187; end 
 
16'd172:if (pixels_tree1[13] <= 614) begin state_tree1<=173; end  else begin state_tree1<=180; end 
 
16'd173:if (pixels_tree1[11] <= 696) begin state_tree1<=174; end  else begin state_tree1<=177; end 
 
16'd174:if (pixels_tree1[11] <= 680) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd177:if (pixels_tree1[13] <= 612) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd180:if (pixels_tree1[16] <= 696) begin state_tree1<=181; end  else begin state_tree1<=184; end 
 
16'd181:if (pixels_tree1[5] <= 2) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd184:if (pixels_tree1[13] <= 615) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd187:if (pixels_tree1[13] <= 614) begin state_tree1<=188; end  else begin state_tree1<=195; end 
 
16'd188:if (pixels_tree1[11] <= 810) begin state_tree1<=189; end  else begin state_tree1<=192; end 
 
16'd189:if (pixels_tree1[7] <= 488) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd192:if (pixels_tree1[17] <= 774) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd195:if (pixels_tree1[16] <= 667) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=197; end 

16'd197:if (pixels_tree1[10] <= 703) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd200:if (pixels_tree1[8] <= 622) begin state_tree1<=201; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd201:if (pixels_tree1[16] <= 737) begin state_tree1<=202; end  else begin state_tree1<=209; end 
 
16'd202:if (pixels_tree1[11] <= 726) begin state_tree1<=203; end  else begin state_tree1<=206; end 
 
16'd203:if (pixels_tree1[13] <= 612) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd206:if (pixels_tree1[16] <= 731) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd209:if (pixels_tree1[10] <= 753) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=211; end 

16'd211:if (pixels_tree1[10] <= 784) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 


		 endcase
		  
   case (state_tree2)


16'd0:if (pixels_tree2[8] <= 538) begin state_tree2<=1; end  else begin state_tree2<=126; end 
 
16'd1:if (pixels_tree2[10] <= 734) begin state_tree2<=2; end  else begin state_tree2<=65; end 
 
16'd2:if (pixels_tree2[11] <= 735) begin state_tree2<=3; end  else begin state_tree2<=34; end 
 
16'd3:if (pixels_tree2[16] <= 702) begin state_tree2<=4; end  else begin state_tree2<=19; end 
 
16'd4:if (pixels_tree2[17] <= 837) begin state_tree2<=5; end  else begin state_tree2<=12; end 
 
16'd5:if (pixels_tree2[2] <= 1) begin state_tree2<=6; end  else begin state_tree2<=9; end 
 
16'd6:if (pixels_tree2[13] <= 621) begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 1; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd9:if (pixels_tree2[15] <= 749) begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd12:if (pixels_tree2[6] <= 361) begin state_tree2<=13; end  else begin state_tree2<=16; end 
 
16'd13:if (pixels_tree2[16] <= 673) begin Label_tree_2<= 1; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd16:if (pixels_tree2[3] <= 2) begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 1; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd19:if (pixels_tree2[13] <= 630) begin state_tree2<=20; end  else begin state_tree2<=27; end 
 
16'd20:if (pixels_tree2[12] <= 535) begin state_tree2<=21; end  else begin state_tree2<=24; end 
 
16'd21:if (pixels_tree2[9] <= 580) begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 2; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd24:if (pixels_tree2[17] <= 792) begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd27:if (pixels_tree2[17] <= 855) begin state_tree2<=28; end  else begin state_tree2<=31; end 
 
16'd28:if (pixels_tree2[13] <= 631) begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd31:if (pixels_tree2[9] <= 366) begin Label_tree_2<= 1; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 2; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd34:if (pixels_tree2[2] <= 2) begin state_tree2<=35; end  else begin state_tree2<=50; end 
 
16'd35:if (pixels_tree2[13] <= 603) begin state_tree2<=36; end  else begin state_tree2<=43; end 
 
16'd36:if (pixels_tree2[14] <= 527) begin state_tree2<=37; end  else begin state_tree2<=40; end 
 
16'd37:if (pixels_tree2[12] <= 490) begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 1; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd40:if (pixels_tree2[2] <= 0) begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd43:if (pixels_tree2[9] <= 508) begin state_tree2<=44; end  else begin state_tree2<=47; end 
 
16'd44:if (pixels_tree2[8] <= 522) begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 0; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd47:if (pixels_tree2[12] <= 528) begin Label_tree_2<= 1; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd50:if (pixels_tree2[12] <= 475) begin state_tree2<=51; end  else begin state_tree2<=58; end 
 
16'd51:if (pixels_tree2[8] <= 491) begin state_tree2<=52; end  else begin state_tree2<=55; end 
 
16'd52:if (pixels_tree2[7] <= 461) begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 0; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd55:if (pixels_tree2[12] <= 269) begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 0; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd58:if (pixels_tree2[6] <= 369) begin state_tree2<=59; end  else begin state_tree2<=62; end 
 
16'd59:if (pixels_tree2[7] <= 473) begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd62:if (pixels_tree2[11] <= 774) begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 1; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd65:if (pixels_tree2[12] <= 517) begin state_tree2<=66; end  else begin state_tree2<=95; end 
 
16'd66:if (pixels_tree2[4] <= 0) begin state_tree2<=67; end  else begin state_tree2<=80; end 
 
16'd67:if (pixels_tree2[16] <= 724) begin state_tree2<=68; end  else begin state_tree2<=75; end 
 
16'd68:if (pixels_tree2[9] <= 517) begin state_tree2<=69; end  else begin state_tree2<=72; end 
 
16'd69:if (pixels_tree2[6] <= 364) begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 1; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd72:if (pixels_tree2[13] <= 604) begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 1; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd75:if (pixels_tree2[13] <= 630) begin state_tree2<=76; end 
       else begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 
 
16'd76:if (pixels_tree2[7] <= 467) begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 2; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd80:if (pixels_tree2[10] <= 747) begin state_tree2<=81; end  else begin state_tree2<=88; end 
 
16'd81:if (pixels_tree2[15] <= 790) begin state_tree2<=82; end  else begin state_tree2<=85; end 
 
16'd82:if (pixels_tree2[15] <= 734) begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd85:if (pixels_tree2[7] <= 467) begin Label_tree_2<= 2; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd88:if (pixels_tree2[17] <= 847) begin state_tree2<=89; end  else begin state_tree2<=92; end 
 
16'd89:if (pixels_tree2[10] <= 768) begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd92:if (pixels_tree2[0] <= 2) begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 1; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd95:if (pixels_tree2[17] <= 769) begin state_tree2<=96; end  else begin state_tree2<=111; end 
 
16'd96:if (pixels_tree2[9] <= 526) begin state_tree2<=97; end  else begin state_tree2<=104; end 
 
16'd97:if (pixels_tree2[13] <= 629) begin state_tree2<=98; end  else begin state_tree2<=101; end 
 
16'd98:if (pixels_tree2[13] <= 620) begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 2; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd101:if (pixels_tree2[2] <= 2) begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 2; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd104:if (pixels_tree2[16] <= 766) begin state_tree2<=105; end  else begin state_tree2<=108; end 
 
16'd105:if (pixels_tree2[13] <= 631) begin Label_tree_2<= 2; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd108:if (pixels_tree2[11] <= 683) begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd111:if (pixels_tree2[12] <= 558) begin state_tree2<=112; end  else begin state_tree2<=119; end 
 
16'd112:if (pixels_tree2[11] <= 692) begin state_tree2<=113; end  else begin state_tree2<=116; end 
 
16'd113:if (pixels_tree2[13] <= 636) begin Label_tree_2<= 2; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd116:if (pixels_tree2[3] <= 0) begin Label_tree_2<= 1; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 2; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd119:if (pixels_tree2[12] <= 583) begin state_tree2<=120; end  else begin state_tree2<=123; end 
 
16'd120:if (pixels_tree2[14] <= 544) begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd123:if (pixels_tree2[15] <= 785) begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd126:if (pixels_tree2[9] <= 523) begin state_tree2<=127; end  else begin state_tree2<=152; end 
 
16'd127:if (pixels_tree2[9] <= 195) begin state_tree2<=128; end  else begin state_tree2<=133; end 
 
16'd128:if (pixels_tree2[5] <= 1) begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end  else begin state_tree2<=130; end 

16'd130:if (pixels_tree2[4] <= 2) begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 1; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd133:if (pixels_tree2[6] <= 394) begin state_tree2<=134; end  else begin state_tree2<=147; end 
 
16'd134:if (pixels_tree2[14] <= 546) begin state_tree2<=135; end  else begin state_tree2<=140; end 
 
16'd135:if (pixels_tree2[16] <= 736) begin state_tree2<=136; end 
       else begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 
 
16'd136:if (pixels_tree2[10] <= 709) begin Label_tree_2<= 0; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd140:if (pixels_tree2[6] <= 380) begin state_tree2<=141; end  else begin state_tree2<=144; end 
 
16'd141:if (pixels_tree2[7] <= 448) begin Label_tree_2<= 0; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 2; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd144:if (pixels_tree2[16] <= 731) begin Label_tree_2<= 1; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd147:if (pixels_tree2[12] <= 542) begin Label_tree_2<= 1; state_tree2<=0;ml_inference_completed_tree2<=1; end  else begin state_tree2<=149; end 

16'd149:if (pixels_tree2[8] <= 565) begin Label_tree_2<= 0; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 2; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd152:if (pixels_tree2[7] <= 472) begin state_tree2<=153; end  else begin state_tree2<=172; end 
 
16'd153:if (pixels_tree2[14] <= 531) begin state_tree2<=154; end  else begin state_tree2<=159; end 
 
16'd154:if (pixels_tree2[15] <= 791) begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end  else begin state_tree2<=156; end 

16'd156:if (pixels_tree2[2] <= 1) begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 2; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd159:if (pixels_tree2[16] <= 719) begin state_tree2<=160; end  else begin state_tree2<=167; end 
 
16'd160:if (pixels_tree2[4] <= 1) begin state_tree2<=161; end  else begin state_tree2<=164; end 
 
16'd161:if (pixels_tree2[6] <= 373) begin Label_tree_2<= 0; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd164:if (pixels_tree2[11] <= 823) begin Label_tree_2<= 0; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 0; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd167:if (pixels_tree2[17] <= 790) begin Label_tree_2<= 0; state_tree2<=0;ml_inference_completed_tree2<=1; end  else begin state_tree2<=169; end 

16'd169:if (pixels_tree2[16] <= 728) begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 3; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd172:if (pixels_tree2[6] <= 388) begin state_tree2<=173; end  else begin state_tree2<=182; end 
 
16'd173:if (pixels_tree2[11] <= 688) begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end  else begin state_tree2<=175; end 

16'd175:if (pixels_tree2[13] <= 617) begin state_tree2<=176; end  else begin state_tree2<=179; end 
 
16'd176:if (pixels_tree2[14] <= 543) begin Label_tree_2<= 2; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 1; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd179:if (pixels_tree2[17] <= 789) begin Label_tree_2<= 4; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 2; state_tree2<=0;ml_inference_completed_tree2<=1; end 

16'd182:if (pixels_tree2[8] <= 611) begin state_tree2<=183; end 
       else begin Label_tree_2<= 0; state_tree2<=0;ml_inference_completed_tree2<=1; end 
 
16'd183:if (pixels_tree2[6] <= 431) begin state_tree2<=184; end 
       else begin Label_tree_2<= 0; state_tree2<=0;ml_inference_completed_tree2<=1; end 
 
16'd184:if (pixels_tree2[12] <= 539) begin Label_tree_2<= 1; state_tree2<=0;ml_inference_completed_tree2<=1; end 
       else begin Label_tree_2<= 2; state_tree2<=0;ml_inference_completed_tree2<=1; end 

        endcase
		  
    case (state_tree3)


16'd0:if (pixels_tree3[16] <= 729) begin state_tree3<=1; end  else begin state_tree3<=124; end 
 
16'd1:if (pixels_tree3[10] <= 696) begin state_tree3<=2; end  else begin state_tree3<=63; end 
 
16'd2:if (pixels_tree3[8] <= 504) begin state_tree3<=3; end  else begin state_tree3<=34; end 
 
16'd3:if (pixels_tree3[11] <= 178) begin state_tree3<=4; end  else begin state_tree3<=19; end 
 
16'd4:if (pixels_tree3[8] <= 467) begin state_tree3<=5; end  else begin state_tree3<=12; end 
 
16'd5:if (pixels_tree3[5] <= 1) begin state_tree3<=6; end  else begin state_tree3<=9; end 
 
16'd6:if (pixels_tree3[17] <= 765) begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd9:if (pixels_tree3[11] <= 122) begin Label_tree_3<= 1; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd12:if (pixels_tree3[13] <= 620) begin state_tree3<=13; end  else begin state_tree3<=16; end 
 
16'd13:if (pixels_tree3[17] <= 773) begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd16:if (pixels_tree3[14] <= 522) begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd19:if (pixels_tree3[17] <= 796) begin state_tree3<=20; end  else begin state_tree3<=27; end 
 
16'd20:if (pixels_tree3[14] <= 522) begin state_tree3<=21; end  else begin state_tree3<=24; end 
 
16'd21:if (pixels_tree3[13] <= 622) begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd24:if (pixels_tree3[11] <= 318) begin Label_tree_3<= 1; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd27:if (pixels_tree3[11] <= 830) begin state_tree3<=28; end  else begin state_tree3<=31; end 
 
16'd28:if (pixels_tree3[13] <= 608) begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 1; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd31:if (pixels_tree3[12] <= 500) begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 1; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd34:if (pixels_tree3[7] <= 472) begin state_tree3<=35; end  else begin state_tree3<=48; end 
 
16'd35:if (pixels_tree3[12] <= 327) begin state_tree3<=36; end  else begin state_tree3<=41; end 
 
16'd36:if (pixels_tree3[9] <= 242) begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end  else begin state_tree3<=38; end 

16'd38:if (pixels_tree3[13] <= 115) begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 0; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd41:if (pixels_tree3[17] <= 854) begin state_tree3<=42; end  else begin state_tree3<=45; end 
 
16'd42:if (pixels_tree3[8] <= 538) begin Label_tree_3<= 0; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 0; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd45:if (pixels_tree3[15] <= 870) begin Label_tree_3<= 1; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 0; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd48:if (pixels_tree3[8] <= 544) begin state_tree3<=49; end  else begin state_tree3<=56; end 
 
16'd49:if (pixels_tree3[14] <= 525) begin state_tree3<=50; end  else begin state_tree3<=53; end 
 
16'd50:if (pixels_tree3[2] <= 1) begin Label_tree_3<= 2; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 0; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd53:if (pixels_tree3[14] <= 558) begin Label_tree_3<= 1; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd56:if (pixels_tree3[15] <= 834) begin state_tree3<=57; end  else begin state_tree3<=60; end 
 
16'd57:if (pixels_tree3[15] <= 756) begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 1; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd60:if (pixels_tree3[10] <= 684) begin Label_tree_3<= 1; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 0; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd63:if (pixels_tree3[13] <= 614) begin state_tree3<=64; end  else begin state_tree3<=95; end 
 
16'd64:if (pixels_tree3[14] <= 511) begin state_tree3<=65; end  else begin state_tree3<=80; end 
 
16'd65:if (pixels_tree3[5] <= 0) begin state_tree3<=66; end  else begin state_tree3<=73; end 
 
16'd66:if (pixels_tree3[11] <= 699) begin state_tree3<=67; end  else begin state_tree3<=70; end 
 
16'd67:if (pixels_tree3[16] <= 724) begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 2; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd70:if (pixels_tree3[6] <= 394) begin Label_tree_3<= 1; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd73:if (pixels_tree3[4] <= 1) begin state_tree3<=74; end  else begin state_tree3<=77; end 
 
16'd74:if (pixels_tree3[14] <= 495) begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd77:if (pixels_tree3[13] <= 613) begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd80:if (pixels_tree3[6] <= 385) begin state_tree3<=81; end  else begin state_tree3<=88; end 
 
16'd81:if (pixels_tree3[9] <= 531) begin state_tree3<=82; end  else begin state_tree3<=85; end 
 
16'd82:if (pixels_tree3[11] <= 716) begin Label_tree_3<= 2; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd85:if (pixels_tree3[14] <= 534) begin Label_tree_3<= 2; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd88:if (pixels_tree3[17] <= 781) begin state_tree3<=89; end  else begin state_tree3<=92; end 
 
16'd89:if (pixels_tree3[2] <= 1) begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd92:if (pixels_tree3[14] <= 564) begin Label_tree_3<= 1; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 0; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd95:if (pixels_tree3[3] <= 0) begin state_tree3<=96; end  else begin state_tree3<=109; end 
 
16'd96:if (pixels_tree3[9] <= 505) begin state_tree3<=97; end  else begin state_tree3<=102; end 
 
16'd97:if (pixels_tree3[15] <= 754) begin Label_tree_3<= 1; state_tree3<=0;ml_inference_completed_tree3<=1; end  else begin state_tree3<=99; end 

16'd99:if (pixels_tree3[13] <= 620) begin Label_tree_3<= 1; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd102:if (pixels_tree3[14] <= 507) begin state_tree3<=103; end  else begin state_tree3<=106; end 
 
16'd103:if (pixels_tree3[12] <= 541) begin Label_tree_3<= 1; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd106:if (pixels_tree3[17] <= 799) begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd109:if (pixels_tree3[3] <= 1) begin state_tree3<=110; end  else begin state_tree3<=117; end 
 
16'd110:if (pixels_tree3[13] <= 615) begin state_tree3<=111; end  else begin state_tree3<=114; end 
 
16'd111:if (pixels_tree3[6] <= 379) begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd114:if (pixels_tree3[10] <= 707) begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd117:if (pixels_tree3[13] <= 632) begin state_tree3<=118; end  else begin state_tree3<=121; end 
 
16'd118:if (pixels_tree3[13] <= 627) begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 2; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd121:if (pixels_tree3[7] <= 463) begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd124:if (pixels_tree3[14] <= 502) begin state_tree3<=125; end  else begin state_tree3<=168; end 
 
16'd125:if (pixels_tree3[14] <= 251) begin state_tree3<=126; end  else begin state_tree3<=139; end 
 
16'd126:if (pixels_tree3[7] <= 471) begin state_tree3<=127; end  else begin state_tree3<=132; end 
 
16'd127:if (pixels_tree3[10] <= 750) begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end  else begin state_tree3<=129; end 

16'd129:if (pixels_tree3[10] <= 790) begin Label_tree_3<= 2; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd132:if (pixels_tree3[13] <= 117) begin Label_tree_3<= 2; state_tree3<=0;ml_inference_completed_tree3<=1; end  else begin state_tree3<=134; end 

16'd134:if (pixels_tree3[9] <= 533) begin state_tree3<=135; end 
       else begin Label_tree_3<= 2; state_tree3<=0;ml_inference_completed_tree3<=1; end 
 
16'd135:if (pixels_tree3[17] <= 807) begin Label_tree_3<= 2; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd139:if (pixels_tree3[11] <= 704) begin state_tree3<=140; end  else begin state_tree3<=153; end 
 
16'd140:if (pixels_tree3[13] <= 605) begin state_tree3<=141; end  else begin state_tree3<=148; end 
 
16'd141:if (pixels_tree3[7] <= 471) begin state_tree3<=142; end  else begin state_tree3<=145; end 
 
16'd142:if (pixels_tree3[12] <= 430) begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd145:if (pixels_tree3[3] <= 0) begin Label_tree_3<= 2; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd148:if (pixels_tree3[10] <= 758) begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end  else begin state_tree3<=150; end 

16'd150:if (pixels_tree3[13] <= 617) begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd153:if (pixels_tree3[5] <= 0) begin state_tree3<=154; end  else begin state_tree3<=161; end 
 
16'd154:if (pixels_tree3[14] <= 459) begin state_tree3<=155; end  else begin state_tree3<=158; end 
 
16'd155:if (pixels_tree3[12] <= 510) begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd158:if (pixels_tree3[10] <= 763) begin Label_tree_3<= 1; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd161:if (pixels_tree3[15] <= 750) begin state_tree3<=162; end  else begin state_tree3<=165; end 
 
16'd162:if (pixels_tree3[11] <= 724) begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd165:if (pixels_tree3[8] <= 462) begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd168:if (pixels_tree3[13] <= 632) begin state_tree3<=169; end  else begin state_tree3<=200; end 
 
16'd169:if (pixels_tree3[11] <= 649) begin state_tree3<=170; end  else begin state_tree3<=185; end 
 
16'd170:if (pixels_tree3[2] <= 0) begin state_tree3<=171; end  else begin state_tree3<=178; end 
 
16'd171:if (pixels_tree3[12] <= 534) begin state_tree3<=172; end  else begin state_tree3<=175; end 
 
16'd172:if (pixels_tree3[15] <= 732) begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 2; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd175:if (pixels_tree3[9] <= 175) begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 0; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd178:if (pixels_tree3[14] <= 524) begin state_tree3<=179; end  else begin state_tree3<=182; end 
 
16'd179:if (pixels_tree3[9] <= 1) begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd182:if (pixels_tree3[12] <= 526) begin Label_tree_3<= 1; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd185:if (pixels_tree3[12] <= 518) begin state_tree3<=186; end  else begin state_tree3<=193; end 
 
16'd186:if (pixels_tree3[0] <= 0) begin state_tree3<=187; end  else begin state_tree3<=190; end 
 
16'd187:if (pixels_tree3[8] <= 480) begin Label_tree_3<= 1; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd190:if (pixels_tree3[4] <= 0) begin Label_tree_3<= 2; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd193:if (pixels_tree3[13] <= 585) begin state_tree3<=194; end  else begin state_tree3<=197; end 
 
16'd194:if (pixels_tree3[10] <= 751) begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd197:if (pixels_tree3[7] <= 453) begin Label_tree_3<= 0; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 2; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd200:if (pixels_tree3[1] <= 0) begin state_tree3<=201; end  else begin state_tree3<=216; end 
 
16'd201:if (pixels_tree3[12] <= 524) begin state_tree3<=202; end  else begin state_tree3<=209; end 
 
16'd202:if (pixels_tree3[16] <= 731) begin state_tree3<=203; end  else begin state_tree3<=206; end 
 
16'd203:if (pixels_tree3[17] <= 803) begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd206:if (pixels_tree3[15] <= 806) begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 2; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd209:if (pixels_tree3[15] <= 751) begin state_tree3<=210; end  else begin state_tree3<=213; end 
 
16'd210:if (pixels_tree3[17] <= 814) begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 2; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd213:if (pixels_tree3[17] <= 781) begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 2; state_tree3<=0;ml_inference_completed_tree3<=1; end 

16'd216:if (pixels_tree3[14] <= 580) begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end  else begin state_tree3<=218; end 

16'd218:if (pixels_tree3[5] <= 1) begin state_tree3<=219; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 
 
16'd219:if (pixels_tree3[15] <= 703) begin Label_tree_3<= 3; state_tree3<=0;ml_inference_completed_tree3<=1; end 
       else begin Label_tree_3<= 4; state_tree3<=0;ml_inference_completed_tree3<=1; end 
      
        endcase
		  
        end
    end




endmodule

module Binary_To_7Segment 
  (
   input       i_Clk,
	input [3:0] i_Binary_Num,
   output      o_Segment_A,
   output      o_Segment_B,
   output      o_Segment_C,
   output      o_Segment_D,
   output      o_Segment_E,
   output      o_Segment_F,
   output      o_Segment_G
   );
 
  reg [6:0]    r_Hex_Encoding = 7'h00;
   
  // Purpose: Creates a case statement for all possible input binary numbers.
  // Drives r_Hex_Encoding appropriately for each input combination.
  // Encoding at https://www.fpga4student.com/2017/09/seven-segment-led-display-controller-basys3-fpga.html
  always @(posedge i_Clk)
    begin
      case (i_Binary_Num)
        4'b0000 : r_Hex_Encoding <= 7'b0000001;
        4'b0001 : r_Hex_Encoding <= 7'b1001111;
        4'b0010 : r_Hex_Encoding <= 7'b0010010;
        4'b0011 : r_Hex_Encoding <= 7'b0000110;
        4'b0100 : r_Hex_Encoding <= 7'b1001100;         
        4'b0101 : r_Hex_Encoding <= 7'b0100100;
        4'b0110 : r_Hex_Encoding <= 7'b0100000;
        4'b0111 : r_Hex_Encoding <= 7'b0001111;
        4'b1000 : r_Hex_Encoding <= 7'b0000000;
        4'b1001 : r_Hex_Encoding <= 7'b0000100; 
		  4'b1010 : r_Hex_Encoding <= 7'b0001000; //a
		  4'b1011 : r_Hex_Encoding <= 7'b1100000; //b
		  4'b1100 : r_Hex_Encoding <= 7'b0110001;  //c
		  4'b1101 : r_Hex_Encoding <= 7'b1000010;  //d
		  4'b1110 : r_Hex_Encoding <= 7'b0110000;  //e
		  4'b1111 : r_Hex_Encoding <= 7'b0111000;  //f
        default: r_Hex_Encoding = 7'b1111111;
      endcase
    end // always @ (posedge i_Clk)
 
  // r_Hex_Encoding[7] is unused
  assign o_Segment_A = r_Hex_Encoding[6];
  assign o_Segment_B = r_Hex_Encoding[5];
  assign o_Segment_C = r_Hex_Encoding[4];
  assign o_Segment_D = r_Hex_Encoding[3];
  assign o_Segment_E = r_Hex_Encoding[2];
  assign o_Segment_F = r_Hex_Encoding[1];
  assign o_Segment_G = r_Hex_Encoding[0];
 
endmodule // Binary_To_7Segment



//////////////////////////////////////////////////////////////////////
// File Downloaded from http://www.nandland.com
//////////////////////////////////////////////////////////////////////
// This file contains the UART Receiver.  This receiver is able to
// receive 8 bits of serial data, one start bit, one stop bit,
// and no parity bit.  When receive is complete o_rx_dv will be
// driven high for one clock cycle.
// https://www.nandland.com/vhdl/modules/module-uart-serial-port-rs232.html
// Set Parameter CLKS_PER_BIT as follows:
// CLKS_PER_BIT = (Frequency of i_Clock)/(Frequency of UART)
// Example: 50 MHz Clock, 921600 baud UART
// (50000000)/(921600) = 53
  
module uart_rx   #(parameter CLKS_PER_BIT = 53)
  (
   input        i_Clock,
   input        i_Rx_Serial,
   output       o_Rx_DV,
   output [7:0] o_Rx_Byte
   );
    
  parameter s_IDLE         = 3'b000;
  parameter s_RX_START_BIT = 3'b001;
  parameter s_RX_DATA_BITS = 3'b010;
  parameter s_RX_STOP_BIT  = 3'b011; 
  parameter s_CLEANUP      = 3'b100;
   
  reg           r_Rx_Data_R = 1'b1;
  reg           r_Rx_Data   = 1'b1;
   
  reg [7:0]     r_Clock_Count = 0;
  reg [2:0]     r_Bit_Index   = 0; //8 bits total
  reg [7:0]     r_Rx_Byte     = 0;
  reg           r_Rx_DV       = 0;
  reg [2:0]     r_SM_Main     = 0;
   
  // Purpose: Double-register the incoming data.
  // This allows it to be used in the UART RX Clock Domain.
  // (It removes problems caused by metastability)
  always @(posedge i_Clock)
    begin
      r_Rx_Data_R <= i_Rx_Serial;
      r_Rx_Data   <= r_Rx_Data_R;
    end
   
   
  // Purpose: Control RX state machine
  always @(posedge i_Clock)
    begin
       
      case (r_SM_Main)
        s_IDLE :
          begin
            r_Rx_DV       <= 1'b0;
            r_Clock_Count <= 0;
            r_Bit_Index   <= 0;
             
            if (r_Rx_Data == 1'b0)          // Start bit detected
              r_SM_Main <= s_RX_START_BIT;
            else
              r_SM_Main <= s_IDLE;
          end
         
        // Check middle of start bit to make sure it's still low
        s_RX_START_BIT :
          begin
            if (r_Clock_Count == (CLKS_PER_BIT-1)/2)
              begin
                if (r_Rx_Data == 1'b0)
                  begin
                    r_Clock_Count <= 0;  // reset counter, found the middle
                    r_SM_Main     <= s_RX_DATA_BITS;
                  end
                else
                  r_SM_Main <= s_IDLE;
              end
            else
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_START_BIT;
              end
          end // case: s_RX_START_BIT
         
         
        // Wait CLKS_PER_BIT-1 clock cycles to sample serial data
        s_RX_DATA_BITS :
          begin
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_DATA_BITS;
              end
            else
              begin
                r_Clock_Count          <= 0;
                r_Rx_Byte[r_Bit_Index] <= r_Rx_Data;
                 
                // Check if we have received all bits
                if (r_Bit_Index < 7)
                  begin
                    r_Bit_Index <= r_Bit_Index + 1;
                    r_SM_Main   <= s_RX_DATA_BITS;
                  end
                else
                  begin
                    r_Bit_Index <= 0;
                    r_SM_Main   <= s_RX_STOP_BIT;
                  end
              end
          end // case: s_RX_DATA_BITS
     
     
        // Receive Stop bit.  Stop bit = 1
        s_RX_STOP_BIT :
          begin
            // Wait CLKS_PER_BIT-1 clock cycles for Stop bit to finish
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_STOP_BIT;
              end
            else
              begin
                r_Rx_DV       <= 1'b1;
                r_Clock_Count <= 0;
                r_SM_Main     <= s_CLEANUP;
              end
          end // case: s_RX_STOP_BIT
     
        // Stay here 1 clock
        s_CLEANUP :
          begin
            r_SM_Main <= s_IDLE;
            r_Rx_DV   <= 1'b0;
          end
         
         
        default :
          r_SM_Main <= s_IDLE;
         
      endcase
    end   
   
  assign o_Rx_DV   = r_Rx_DV;
  assign o_Rx_Byte = r_Rx_Byte;
   
endmodule // uart_rx


//////////////////////////////////////////////////////////////////////
// File Downloaded from http://www.nandland.com
//////////////////////////////////////////////////////////////////////
// This file contains the UART Transmitter.  This transmitter is able
// to transmit 8 bits of serial data, one start bit, one stop bit,
// and no parity bit.  When transmit is complete o_Tx_done will be
// driven high for one clock cycle.
//
// Set Parameter CLKS_PER_BIT as follows:
// CLKS_PER_BIT = (Frequency of i_Clock)/(Frequency of UART)
// Example: 50 MHz Clock, 921600 baud UART
// (50000000)/(921600) = 53
  
module uart_tx 
  #(parameter CLKS_PER_BIT = 53)
  (
   input       i_Clock,
   input       i_Tx_DV,
   input [7:0] i_Tx_Byte, 
   output      o_Tx_Active,
   output reg  o_Tx_Serial,
   output      o_Tx_Done
   );
  
  parameter s_IDLE         = 3'b000;
  parameter s_TX_START_BIT = 3'b001;
  parameter s_TX_DATA_BITS = 3'b010;
  parameter s_TX_STOP_BIT  = 3'b011;
  parameter s_CLEANUP      = 3'b100;
   
  reg [2:0]    r_SM_Main     = 0;
  reg [7:0]    r_Clock_Count = 0;
  reg [2:0]    r_Bit_Index   = 0;
  reg [7:0]    r_Tx_Data     = 0;
  reg          r_Tx_Done     = 0;
  reg          r_Tx_Active   = 0;
     
  always @(posedge i_Clock)
    begin
       
      case (r_SM_Main)
        s_IDLE :
          begin
            o_Tx_Serial   <= 1'b1;         // Drive Line High for Idle
            r_Tx_Done     <= 1'b0;
            r_Clock_Count <= 0;
            r_Bit_Index   <= 0;
             
            if (i_Tx_DV == 1'b1)
              begin
                r_Tx_Active <= 1'b1;
                r_Tx_Data   <= i_Tx_Byte;
                r_SM_Main   <= s_TX_START_BIT;
              end
            else
              r_SM_Main <= s_IDLE;
          end // case: s_IDLE
         
         
        // Send out Start Bit. Start bit = 0
        s_TX_START_BIT :
          begin
            o_Tx_Serial <= 1'b0;
             
            // Wait CLKS_PER_BIT-1 clock cycles for start bit to finish
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_TX_START_BIT;
              end
            else
              begin
                r_Clock_Count <= 0;
                r_SM_Main     <= s_TX_DATA_BITS;
              end
          end // case: s_TX_START_BIT
         
         
        // Wait CLKS_PER_BIT-1 clock cycles for data bits to finish         
        s_TX_DATA_BITS :
          begin
            o_Tx_Serial <= r_Tx_Data[r_Bit_Index];
             
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_TX_DATA_BITS;
              end
            else
              begin
                r_Clock_Count <= 0;
                 
                // Check if we have sent out all bits
                if (r_Bit_Index < 7)
                  begin
                    r_Bit_Index <= r_Bit_Index + 1;
                    r_SM_Main   <= s_TX_DATA_BITS;
                  end
                else
                  begin
                    r_Bit_Index <= 0;
                    r_SM_Main   <= s_TX_STOP_BIT;
                  end
              end
          end // case: s_TX_DATA_BITS
         
         
        // Send out Stop bit.  Stop bit = 1
        s_TX_STOP_BIT :
          begin
            o_Tx_Serial <= 1'b1;
             
            // Wait CLKS_PER_BIT-1 clock cycles for Stop bit to finish
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_TX_STOP_BIT;
              end
            else
              begin
                r_Tx_Done     <= 1'b1;
                r_Clock_Count <= 0;
                r_SM_Main     <= s_CLEANUP;
                r_Tx_Active   <= 1'b0;
              end
          end // case: s_Tx_STOP_BIT
         
         
        // Stay here 1 clock
        s_CLEANUP :
          begin
            r_Tx_Done <= 1'b1;
            r_SM_Main <= s_IDLE;
          end
         
         
        default :
          r_SM_Main <= s_IDLE;
         
      endcase
    end
 
  assign o_Tx_Active = r_Tx_Active;
  assign o_Tx_Done   = r_Tx_Done;
   
endmodule

