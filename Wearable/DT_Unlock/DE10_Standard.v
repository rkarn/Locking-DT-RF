
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_Standard(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		 reg    [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire RxD;
reg seg7_disp_off_signal;

parameter storage_length = 54;
reg transmit;
wire transmit_debounced;
wire tick;
wire [7:0] receive_data;
//reg [7:0] count_value;
wire receive_done;
wire [7:0] mem_data;
reg [9:0] mem_address;
reg [9:0] written_mem_address;
reg mem_wr;
reg first_val_receive;
reg txdone_flag;
reg [7:0] pixels_tree1[storage_length-1:0];
reg [7:0] Label_tree_1;
wire [7:0] Label;
reg [7:0] serial_transmit_reg;
reg Allpixel_receive_complete;
reg [15:0] state_tree1;
reg ml_inference_completed_tree1;

//=======================================================
//  Structural coding
//=======================================================


Binary_To_7Segment seg1 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label_tree_1[3:0] : mem_address[3:0]),  .o_Segment_A(HEX0[0]), .o_Segment_B(HEX0[1]),  .o_Segment_C(HEX0[2]), 
                          .o_Segment_D(HEX0[3]), .o_Segment_E(HEX0[4]), .o_Segment_F(HEX0[5]), .o_Segment_G(HEX0[6]));
								  
Binary_To_7Segment seg2 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label_tree_2 : mem_address[7:4]),  .o_Segment_A(HEX1[0]), .o_Segment_B(HEX1[1]),  .o_Segment_C(HEX1[2]), 
                          .o_Segment_D(HEX1[3]), .o_Segment_E(HEX1[4]), .o_Segment_F(HEX1[5]), .o_Segment_G(HEX1[6]));
								  
Binary_To_7Segment seg3 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label_tree_3 : mem_address[9:8]),  .o_Segment_A(HEX2[0]), .o_Segment_B(HEX2[1]),  .o_Segment_C(HEX2[2]), 
                          .o_Segment_D(HEX2[3]), .o_Segment_E(HEX2[4]), .o_Segment_F(HEX2[5]), .o_Segment_G(HEX2[6]));
								  
								  
Binary_To_7Segment seg4 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? 4'b1011 : written_mem_address[3:0]),  .o_Segment_A(HEX3[0]), .o_Segment_B(HEX3[1]),  .o_Segment_C(HEX3[2]), 
                          .o_Segment_D(HEX3[3]), .o_Segment_E(HEX3[4]), .o_Segment_F(HEX3[5]), .o_Segment_G(HEX3[6]));
								  
Binary_To_7Segment seg5 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? 4'b1010 : written_mem_address[7:4]),  .o_Segment_A(HEX4[0]), .o_Segment_B(HEX4[1]),  .o_Segment_C(HEX4[2]), 
                          .o_Segment_D(HEX4[3]), .o_Segment_E(HEX4[4]), .o_Segment_F(HEX4[5]), .o_Segment_G(HEX4[6]));
								  
Binary_To_7Segment seg6 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? 4'b0001 : written_mem_address[9:8]),  .o_Segment_A(HEX5[0]), .o_Segment_B(HEX5[1]),  .o_Segment_C(HEX5[2]), 
                          .o_Segment_D(HEX5[3]), .o_Segment_E(HEX5[4]), .o_Segment_F(HEX5[5]), .o_Segment_G(HEX5[6]));

					  
								  
assign RxD = GPIO[0];  //UART receiver pin for FPGA
// GPIO[1];  //UART transmitter Pin for FPGA


uart_rx R3 (.i_Clock(CLOCK_50), .i_Rx_Serial(RxD), .o_Rx_DV(receive_done), .o_Rx_Byte(receive_data) );

always @ (posedge receive_done)
begin
      if (SW[0] == 1)    begin LEDR[1] <= 0; end
      else begin LEDR[1] <= ~LEDR[1]; end
end

always @ (posedge CLOCK_50)
begin
    if (receive_done == 1)
        begin
        mem_address <= mem_address+1;   written_mem_address <= mem_address; 
        pixels_tree1[mem_address] <= receive_data;
        if (mem_address >= storage_length-1)
        begin Allpixel_receive_complete <=1; end
        else
        begin Allpixel_receive_complete <=0; end
        end
            
     if (SW[0] == 1)
         begin
            mem_address <= 0;
				seg7_disp_off_signal <=0;
         end
     
     if (tick == 1)
         begin
           if (txdone_flag == 0 )
               begin
                    txdone_flag <= 1;
               end
           else 
               begin
                    mem_address <= mem_address+1;
                    txdone_flag <= 0;
               end              
         end
     
     if (mem_address < written_mem_address && SW[1]== 1)
     begin
        transmit <= 1;    
        serial_transmit_reg <= pixels_tree1[mem_address];    
     end
     else if (mem_address == written_mem_address && SW[1]== 1)
     begin 
        transmit <= 1;   
        serial_transmit_reg <= Label;    
     end
     else
     begin
        transmit <=0; 
     end 
	  
	  if (SW[2] == 1)
         begin
				seg7_disp_off_signal <= 1;
         end
end

uart_tx T1 (.i_Clock(CLOCK_50), .i_Tx_DV(transmit), .i_Tx_Byte(serial_transmit_reg), .o_Tx_Active(), .o_Tx_Serial(GPIO[1]), .o_Tx_Done(tick) );

assign Label = Label_tree_1;

always @ (posedge CLOCK_50)
    begin
    if (SW[0] == 1)
         begin
            state_tree1 <= 0;
         end
         
    if (Allpixel_receive_complete==1)
        begin
 case (state_tree1)        


16'd0:if (pixels_tree1[13] <= 649) begin state_tree1<=1; end  else begin state_tree1<=50; end 
 
16'd1:if (pixels_tree1[5] <= 221) begin state_tree1<=2; end  else begin state_tree1<=37; end 
 
16'd2:if (pixels_tree1[12] <= 186) begin state_tree1<=3; end  else begin state_tree1<=22; end 
 
16'd3:if (pixels_tree1[37] <= 646) begin state_tree1<=4; end  else begin state_tree1<=17; end 
 
16'd4:if (pixels_tree1[33] <= 35) begin state_tree1<=5; end  else begin state_tree1<=10; end 
 
16'd5:if (pixels_tree1[48] <= 458) begin state_tree1<=6; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd6:if (pixels_tree1[14] <= 224) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd10:if (pixels_tree1[4] <= 255) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=12; end 

16'd12:if (pixels_tree1[24] <= 545) begin state_tree1<=13; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd13:if (pixels_tree1[46] <= 12) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd17:if (pixels_tree1[25] <= 976) begin state_tree1<=18; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd18:if (pixels_tree1[13] <= 623) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd22:if (pixels_tree1[35] <= 527) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=24; end 

16'd24:if (pixels_tree1[3] <= 531) begin state_tree1<=25; end  else begin state_tree1<=32; end 
 
16'd25:if (pixels_tree1[52] <= 106) begin state_tree1<=26; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd26:if (pixels_tree1[10] <= 358) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=28; end 

16'd28:if (pixels_tree1[25] <= 511) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd32:if (pixels_tree1[35] <= 660) begin state_tree1<=33; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd33:if (pixels_tree1[46] <= 10) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd37:if (pixels_tree1[14] <= 42) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=39; end 

16'd39:if (pixels_tree1[44] <= 118) begin state_tree1<=40; end  else begin state_tree1<=43; end 
 
16'd40:if (pixels_tree1[11] <= 59) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd43:if (pixels_tree1[39] <= 689) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=45; end 

16'd45:if (pixels_tree1[11] <= 251) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=47; end 

16'd47:if (pixels_tree1[38] <= 924) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd50:if (pixels_tree1[22] <= 300) begin state_tree1<=51; end  else begin state_tree1<=192; end 
 
16'd51:if (pixels_tree1[35] <= 688) begin state_tree1<=52; end  else begin state_tree1<=161; end 
 
16'd52:if (pixels_tree1[15] <= 332) begin state_tree1<=53; end  else begin state_tree1<=64; end 
 
16'd53:if (pixels_tree1[49] <= 659) begin state_tree1<=54; end  else begin state_tree1<=59; end 
 
16'd54:if (pixels_tree1[36] <= 232) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=56; end 

16'd56:if (pixels_tree1[1] <= 957) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd59:if (pixels_tree1[44] <= 373) begin state_tree1<=60; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd60:if (pixels_tree1[27] <= 969) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd64:if (pixels_tree1[1] <= 516) begin state_tree1<=65; end  else begin state_tree1<=114; end 
 
16'd65:if (pixels_tree1[39] <= 923) begin state_tree1<=66; end  else begin state_tree1<=87; end 
 
16'd66:if (pixels_tree1[24] <= 567) begin state_tree1<=67; end  else begin state_tree1<=74; end 
 
16'd67:if (pixels_tree1[21] <= 420) begin state_tree1<=68; end  else begin state_tree1<=71; end 
 
16'd68:if (pixels_tree1[46] <= 14) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd71:if (pixels_tree1[46] <= 13) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd74:if (pixels_tree1[1] <= 295) begin state_tree1<=75; end  else begin state_tree1<=80; end 
 
16'd75:if (pixels_tree1[9] <= 486) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=77; end 

16'd77:if (pixels_tree1[40] <= 315) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd80:if (pixels_tree1[36] <= 406) begin state_tree1<=81; end  else begin state_tree1<=84; end 
 
16'd81:if (pixels_tree1[47] <= 185) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd84:if (pixels_tree1[4] <= 261) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd87:if (pixels_tree1[43] <= 421) begin state_tree1<=88; end  else begin state_tree1<=101; end 
 
16'd88:if (pixels_tree1[31] <= 96) begin state_tree1<=89; end  else begin state_tree1<=94; end 
 
16'd89:if (pixels_tree1[16] <= 739) begin state_tree1<=90; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd90:if (pixels_tree1[33] <= 34) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd94:if (pixels_tree1[46] <= 10) begin state_tree1<=95; end  else begin state_tree1<=98; end 
 
16'd95:if (pixels_tree1[30] <= 437) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd98:if (pixels_tree1[50] <= 483) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd101:if (pixels_tree1[42] <= 456) begin state_tree1<=102; end  else begin state_tree1<=107; end 
 
16'd102:if (pixels_tree1[14] <= 383) begin state_tree1<=103; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd103:if (pixels_tree1[19] <= 300) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd107:if (pixels_tree1[53] <= 808) begin state_tree1<=108; end  else begin state_tree1<=111; end 
 
16'd108:if (pixels_tree1[52] <= 474) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd111:if (pixels_tree1[41] <= 853) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd114:if (pixels_tree1[31] <= 79) begin state_tree1<=115; end  else begin state_tree1<=140; end 
 
16'd115:if (pixels_tree1[40] <= 259) begin state_tree1<=116; end  else begin state_tree1<=125; end 
 
16'd116:if (pixels_tree1[38] <= 142) begin state_tree1<=117; end  else begin state_tree1<=122; end 
 
16'd117:if (pixels_tree1[26] <= 667) begin state_tree1<=118; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd118:if (pixels_tree1[40] <= 154) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd122:if (pixels_tree1[44] <= 236) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd125:if (pixels_tree1[10] <= 550) begin state_tree1<=126; end  else begin state_tree1<=133; end 
 
16'd126:if (pixels_tree1[40] <= 740) begin state_tree1<=127; end  else begin state_tree1<=130; end 
 
16'd127:if (pixels_tree1[3] <= 553) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd130:if (pixels_tree1[29] <= 647) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd133:if (pixels_tree1[29] <= 371) begin state_tree1<=134; end  else begin state_tree1<=137; end 
 
16'd134:if (pixels_tree1[4] <= 505) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd137:if (pixels_tree1[43] <= 662) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd140:if (pixels_tree1[31] <= 661) begin state_tree1<=141; end  else begin state_tree1<=156; end 
 
16'd141:if (pixels_tree1[15] <= 523) begin state_tree1<=142; end  else begin state_tree1<=149; end 
 
16'd142:if (pixels_tree1[36] <= 711) begin state_tree1<=143; end  else begin state_tree1<=146; end 
 
16'd143:if (pixels_tree1[2] <= 856) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd146:if (pixels_tree1[1] <= 536) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd149:if (pixels_tree1[4] <= 998) begin state_tree1<=150; end  else begin state_tree1<=153; end 
 
16'd150:if (pixels_tree1[27] <= 859) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd153:if (pixels_tree1[6] <= 344) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd156:if (pixels_tree1[35] <= 324) begin state_tree1<=157; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd157:if (pixels_tree1[23] <= 808) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd161:if (pixels_tree1[2] <= 851) begin state_tree1<=162; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd162:if (pixels_tree1[1] <= 284) begin state_tree1<=163; end  else begin state_tree1<=166; end 
 
16'd163:if (pixels_tree1[4] <= 254) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd166:if (pixels_tree1[3] <= 515) begin state_tree1<=167; end  else begin state_tree1<=182; end 
 
16'd167:if (pixels_tree1[31] <= 343) begin state_tree1<=168; end  else begin state_tree1<=179; end 
 
16'd168:if (pixels_tree1[53] <= 322) begin state_tree1<=169; end  else begin state_tree1<=172; end 
 
16'd169:if (pixels_tree1[15] <= 736) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd172:if (pixels_tree1[32] <= 1013) begin state_tree1<=173; end  else begin state_tree1<=176; end 
 
16'd173:if (pixels_tree1[38] <= 453) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd176:if (pixels_tree1[6] <= 295) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd179:if (pixels_tree1[17] <= 466) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd182:if (pixels_tree1[27] <= 821) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=184; end 

16'd184:if (pixels_tree1[17] <= 856) begin state_tree1<=185; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd185:if (pixels_tree1[48] <= 82) begin state_tree1<=186; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd186:if (pixels_tree1[44] <= 416) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd192:if (pixels_tree1[40] <= 303) begin state_tree1<=193; end  else begin state_tree1<=270; end 
 
16'd193:if (pixels_tree1[1] <= 79) begin state_tree1<=194; end  else begin state_tree1<=197; end 
 
16'd194:if (pixels_tree1[11] <= 484) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd197:if (pixels_tree1[26] <= 799) begin state_tree1<=198; end  else begin state_tree1<=251; end 
 
16'd198:if (pixels_tree1[22] <= 703) begin state_tree1<=199; end  else begin state_tree1<=226; end 
 
16'd199:if (pixels_tree1[39] <= 974) begin state_tree1<=200; end  else begin state_tree1<=215; end 
 
16'd200:if (pixels_tree1[8] <= 379) begin state_tree1<=201; end  else begin state_tree1<=208; end 
 
16'd201:if (pixels_tree1[36] <= 247) begin state_tree1<=202; end  else begin state_tree1<=205; end 
 
16'd202:if (pixels_tree1[3] <= 703) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd205:if (pixels_tree1[3] <= 720) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd208:if (pixels_tree1[41] <= 383) begin state_tree1<=209; end  else begin state_tree1<=212; end 
 
16'd209:if (pixels_tree1[11] <= 300) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd212:if (pixels_tree1[2] <= 784) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd215:if (pixels_tree1[2] <= 784) begin state_tree1<=216; end  else begin state_tree1<=221; end 
 
16'd216:if (pixels_tree1[12] <= 182) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=218; end 

16'd218:if (pixels_tree1[53] <= 849) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd221:if (pixels_tree1[4] <= 573) begin state_tree1<=222; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd222:if (pixels_tree1[46] <= 8) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd226:if (pixels_tree1[20] <= 722) begin state_tree1<=227; end  else begin state_tree1<=242; end 
 
16'd227:if (pixels_tree1[42] <= 641) begin state_tree1<=228; end  else begin state_tree1<=235; end 
 
16'd228:if (pixels_tree1[19] <= 778) begin state_tree1<=229; end  else begin state_tree1<=232; end 
 
16'd229:if (pixels_tree1[23] <= 414) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd232:if (pixels_tree1[43] <= 830) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd235:if (pixels_tree1[27] <= 211) begin state_tree1<=236; end  else begin state_tree1<=239; end 
 
16'd236:if (pixels_tree1[26] <= 221) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd239:if (pixels_tree1[18] <= 404) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd242:if (pixels_tree1[1] <= 124) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=244; end 

16'd244:if (pixels_tree1[20] <= 779) begin state_tree1<=245; end  else begin state_tree1<=248; end 
 
16'd245:if (pixels_tree1[23] <= 242) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd248:if (pixels_tree1[2] <= 811) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd251:if (pixels_tree1[38] <= 974) begin state_tree1<=252; end  else begin state_tree1<=263; end 
 
16'd252:if (pixels_tree1[50] <= 289) begin state_tree1<=253; end  else begin state_tree1<=256; end 
 
16'd253:if (pixels_tree1[23] <= 569) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd256:if (pixels_tree1[9] <= 472) begin state_tree1<=257; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd257:if (pixels_tree1[15] <= 414) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=259; end 

16'd259:if (pixels_tree1[14] <= 248) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd263:if (pixels_tree1[20] <= 580) begin state_tree1<=264; end  else begin state_tree1<=267; end 
 
16'd264:if (pixels_tree1[43] <= 804) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd267:if (pixels_tree1[16] <= 544) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd270:if (pixels_tree1[3] <= 119) begin state_tree1<=271; end  else begin state_tree1<=314; end 
 
16'd271:if (pixels_tree1[2] <= 811) begin state_tree1<=272; end  else begin state_tree1<=283; end 
 
16'd272:if (pixels_tree1[12] <= 444) begin state_tree1<=273; end  else begin state_tree1<=276; end 
 
16'd273:if (pixels_tree1[6] <= 395) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd276:if (pixels_tree1[40] <= 518) begin state_tree1<=277; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd277:if (pixels_tree1[30] <= 196) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=279; end 

16'd279:if (pixels_tree1[27] <= 921) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd283:if (pixels_tree1[4] <= 992) begin state_tree1<=284; end  else begin state_tree1<=305; end 
 
16'd284:if (pixels_tree1[7] <= 619) begin state_tree1<=285; end  else begin state_tree1<=298; end 
 
16'd285:if (pixels_tree1[8] <= 482) begin state_tree1<=286; end  else begin state_tree1<=293; end 
 
16'd286:if (pixels_tree1[30] <= 181) begin state_tree1<=287; end  else begin state_tree1<=290; end 
 
16'd287:if (pixels_tree1[51] <= 600) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd290:if (pixels_tree1[12] <= 434) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd293:if (pixels_tree1[14] <= 310) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=295; end 

16'd295:if (pixels_tree1[53] <= 809) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd298:if (pixels_tree1[12] <= 465) begin state_tree1<=299; end  else begin state_tree1<=302; end 
 
16'd299:if (pixels_tree1[33] <= 42) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd302:if (pixels_tree1[14] <= 311) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd305:if (pixels_tree1[39] <= 938) begin state_tree1<=306; end  else begin state_tree1<=309; end 
 
16'd306:if (pixels_tree1[21] <= 492) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd309:if (pixels_tree1[3] <= 100) begin state_tree1<=310; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd310:if (pixels_tree1[50] <= 603) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd314:if (pixels_tree1[40] <= 775) begin state_tree1<=315; end  else begin state_tree1<=362; end 
 
16'd315:if (pixels_tree1[48] <= 414) begin state_tree1<=316; end  else begin state_tree1<=339; end 
 
16'd316:if (pixels_tree1[4] <= 527) begin state_tree1<=317; end  else begin state_tree1<=332; end 
 
16'd317:if (pixels_tree1[37] <= 533) begin state_tree1<=318; end  else begin state_tree1<=325; end 
 
16'd318:if (pixels_tree1[28] <= 702) begin state_tree1<=319; end  else begin state_tree1<=322; end 
 
16'd319:if (pixels_tree1[9] <= 529) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd322:if (pixels_tree1[13] <= 757) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd325:if (pixels_tree1[11] <= 320) begin state_tree1<=326; end  else begin state_tree1<=329; end 
 
16'd326:if (pixels_tree1[3] <= 623) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd329:if (pixels_tree1[35] <= 674) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd332:if (pixels_tree1[37] <= 341) begin state_tree1<=333; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd333:if (pixels_tree1[14] <= 335) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=335; end 

16'd335:if (pixels_tree1[4] <= 978) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd339:if (pixels_tree1[8] <= 527) begin state_tree1<=340; end  else begin state_tree1<=353; end 
 
16'd340:if (pixels_tree1[1] <= 79) begin state_tree1<=341; end  else begin state_tree1<=346; end 
 
16'd341:if (pixels_tree1[9] <= 407) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=343; end 

16'd343:if (pixels_tree1[49] <= 290) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd346:if (pixels_tree1[28] <= 782) begin state_tree1<=347; end  else begin state_tree1<=350; end 
 
16'd347:if (pixels_tree1[43] <= 335) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd350:if (pixels_tree1[13] <= 776) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd353:if (pixels_tree1[40] <= 665) begin state_tree1<=354; end  else begin state_tree1<=359; end 
 
16'd354:if (pixels_tree1[8] <= 847) begin state_tree1<=355; end 
       else begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd355:if (pixels_tree1[19] <= 883) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd359:if (pixels_tree1[10] <= 300) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd362:if (pixels_tree1[3] <= 497) begin state_tree1<=363; end  else begin state_tree1<=366; end 
 
16'd363:if (pixels_tree1[52] <= 969) begin Label_tree_1<= 3; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd366:if (pixels_tree1[1] <= 284) begin state_tree1<=367; end  else begin state_tree1<=374; end 
 
16'd367:if (pixels_tree1[31] <= 167) begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end  else begin state_tree1<=369; end 

16'd369:if (pixels_tree1[39] <= 952) begin state_tree1<=370; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 
 
16'd370:if (pixels_tree1[12] <= 147) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd374:if (pixels_tree1[29] <= 539) begin state_tree1<=375; end  else begin state_tree1<=382; end 
 
16'd375:if (pixels_tree1[17] <= 619) begin state_tree1<=376; end  else begin state_tree1<=379; end 
 
16'd376:if (pixels_tree1[37] <= 519) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd379:if (pixels_tree1[12] <= 191) begin Label_tree_1<= 2; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 0; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd382:if (pixels_tree1[14] <= 218) begin state_tree1<=383; end  else begin state_tree1<=386; end 
 
16'd383:if (pixels_tree1[22] <= 621) begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 

16'd386:if (pixels_tree1[30] <= 900) begin Label_tree_1<= 4; state_tree1<=0;ml_inference_completed_tree1<=1; end 
       else begin Label_tree_1<= 1; state_tree1<=0;ml_inference_completed_tree1<=1; end 

		 endcase
     
        end
    end




endmodule

module Binary_To_7Segment 
  (
   input       i_Clk,
	input [3:0] i_Binary_Num,
   output      o_Segment_A,
   output      o_Segment_B,
   output      o_Segment_C,
   output      o_Segment_D,
   output      o_Segment_E,
   output      o_Segment_F,
   output      o_Segment_G
   );
 
  reg [6:0]    r_Hex_Encoding = 7'h00;
   
  // Purpose: Creates a case statement for all possible input binary numbers.
  // Drives r_Hex_Encoding appropriately for each input combination.
  // Encoding at https://www.fpga4student.com/2017/09/seven-segment-led-display-controller-basys3-fpga.html
  always @(posedge i_Clk)
    begin
      case (i_Binary_Num)
        4'b0000 : r_Hex_Encoding <= 7'b0000001;
        4'b0001 : r_Hex_Encoding <= 7'b1001111;
        4'b0010 : r_Hex_Encoding <= 7'b0010010;
        4'b0011 : r_Hex_Encoding <= 7'b0000110;
        4'b0100 : r_Hex_Encoding <= 7'b1001100;         
        4'b0101 : r_Hex_Encoding <= 7'b0100100;
        4'b0110 : r_Hex_Encoding <= 7'b0100000;
        4'b0111 : r_Hex_Encoding <= 7'b0001111;
        4'b1000 : r_Hex_Encoding <= 7'b0000000;
        4'b1001 : r_Hex_Encoding <= 7'b0000100; 
		  4'b1010 : r_Hex_Encoding <= 7'b0001000; //a
		  4'b1011 : r_Hex_Encoding <= 7'b1100000; //b
		  4'b1100 : r_Hex_Encoding <= 7'b0110001;  //c
		  4'b1101 : r_Hex_Encoding <= 7'b1000010;  //d
		  4'b1110 : r_Hex_Encoding <= 7'b0110000;  //e
		  4'b1111 : r_Hex_Encoding <= 7'b0111000;  //f
        default: r_Hex_Encoding = 7'b1111111;
      endcase
    end // always @ (posedge i_Clk)
 
  // r_Hex_Encoding[7] is unused
  assign o_Segment_A = r_Hex_Encoding[6];
  assign o_Segment_B = r_Hex_Encoding[5];
  assign o_Segment_C = r_Hex_Encoding[4];
  assign o_Segment_D = r_Hex_Encoding[3];
  assign o_Segment_E = r_Hex_Encoding[2];
  assign o_Segment_F = r_Hex_Encoding[1];
  assign o_Segment_G = r_Hex_Encoding[0];
 
endmodule // Binary_To_7Segment



//////////////////////////////////////////////////////////////////////
// File Downloaded from http://www.nandland.com
//////////////////////////////////////////////////////////////////////
// This file contains the UART Receiver.  This receiver is able to
// receive 8 bits of serial data, one start bit, one stop bit,
// and no parity bit.  When receive is complete o_rx_dv will be
// driven high for one clock cycle.
// https://www.nandland.com/vhdl/modules/module-uart-serial-port-rs232.html
// Set Parameter CLKS_PER_BIT as follows:
// CLKS_PER_BIT = (Frequency of i_Clock)/(Frequency of UART)
// Example: 50 MHz Clock, 921600 baud UART
// (50000000)/(921600) = 53
  
module uart_rx   #(parameter CLKS_PER_BIT = 53)
  (
   input        i_Clock,
   input        i_Rx_Serial,
   output       o_Rx_DV,
   output [7:0] o_Rx_Byte
   );
    
  parameter s_IDLE         = 3'b000;
  parameter s_RX_START_BIT = 3'b001;
  parameter s_RX_DATA_BITS = 3'b010;
  parameter s_RX_STOP_BIT  = 3'b011; 
  parameter s_CLEANUP      = 3'b100;
   
  reg           r_Rx_Data_R = 1'b1;
  reg           r_Rx_Data   = 1'b1;
   
  reg [7:0]     r_Clock_Count = 0;
  reg [2:0]     r_Bit_Index   = 0; //8 bits total
  reg [7:0]     r_Rx_Byte     = 0;
  reg           r_Rx_DV       = 0;
  reg [2:0]     r_SM_Main     = 0;
   
  // Purpose: Double-register the incoming data.
  // This allows it to be used in the UART RX Clock Domain.
  // (It removes problems caused by metastability)
  always @(posedge i_Clock)
    begin
      r_Rx_Data_R <= i_Rx_Serial;
      r_Rx_Data   <= r_Rx_Data_R;
    end
   
   
  // Purpose: Control RX state machine
  always @(posedge i_Clock)
    begin
       
      case (r_SM_Main)
        s_IDLE :
          begin
            r_Rx_DV       <= 1'b0;
            r_Clock_Count <= 0;
            r_Bit_Index   <= 0;
             
            if (r_Rx_Data == 1'b0)          // Start bit detected
              r_SM_Main <= s_RX_START_BIT;
            else
              r_SM_Main <= s_IDLE;
          end
         
        // Check middle of start bit to make sure it's still low
        s_RX_START_BIT :
          begin
            if (r_Clock_Count == (CLKS_PER_BIT-1)/2)
              begin
                if (r_Rx_Data == 1'b0)
                  begin
                    r_Clock_Count <= 0;  // reset counter, found the middle
                    r_SM_Main     <= s_RX_DATA_BITS;
                  end
                else
                  r_SM_Main <= s_IDLE;
              end
            else
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_START_BIT;
              end
          end // case: s_RX_START_BIT
         
         
        // Wait CLKS_PER_BIT-1 clock cycles to sample serial data
        s_RX_DATA_BITS :
          begin
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_DATA_BITS;
              end
            else
              begin
                r_Clock_Count          <= 0;
                r_Rx_Byte[r_Bit_Index] <= r_Rx_Data;
                 
                // Check if we have received all bits
                if (r_Bit_Index < 7)
                  begin
                    r_Bit_Index <= r_Bit_Index + 1;
                    r_SM_Main   <= s_RX_DATA_BITS;
                  end
                else
                  begin
                    r_Bit_Index <= 0;
                    r_SM_Main   <= s_RX_STOP_BIT;
                  end
              end
          end // case: s_RX_DATA_BITS
     
     
        // Receive Stop bit.  Stop bit = 1
        s_RX_STOP_BIT :
          begin
            // Wait CLKS_PER_BIT-1 clock cycles for Stop bit to finish
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_STOP_BIT;
              end
            else
              begin
                r_Rx_DV       <= 1'b1;
                r_Clock_Count <= 0;
                r_SM_Main     <= s_CLEANUP;
              end
          end // case: s_RX_STOP_BIT
     
        // Stay here 1 clock
        s_CLEANUP :
          begin
            r_SM_Main <= s_IDLE;
            r_Rx_DV   <= 1'b0;
          end
         
         
        default :
          r_SM_Main <= s_IDLE;
         
      endcase
    end   
   
  assign o_Rx_DV   = r_Rx_DV;
  assign o_Rx_Byte = r_Rx_Byte;
   
endmodule // uart_rx


//////////////////////////////////////////////////////////////////////
// File Downloaded from http://www.nandland.com
//////////////////////////////////////////////////////////////////////
// This file contains the UART Transmitter.  This transmitter is able
// to transmit 8 bits of serial data, one start bit, one stop bit,
// and no parity bit.  When transmit is complete o_Tx_done will be
// driven high for one clock cycle.
//
// Set Parameter CLKS_PER_BIT as follows:
// CLKS_PER_BIT = (Frequency of i_Clock)/(Frequency of UART)
// Example: 50 MHz Clock, 921600 baud UART
// (50000000)/(921600) = 53
  
module uart_tx 
  #(parameter CLKS_PER_BIT = 53)
  (
   input       i_Clock,
   input       i_Tx_DV,
   input [7:0] i_Tx_Byte, 
   output      o_Tx_Active,
   output reg  o_Tx_Serial,
   output      o_Tx_Done
   );
  
  parameter s_IDLE         = 3'b000;
  parameter s_TX_START_BIT = 3'b001;
  parameter s_TX_DATA_BITS = 3'b010;
  parameter s_TX_STOP_BIT  = 3'b011;
  parameter s_CLEANUP      = 3'b100;
   
  reg [2:0]    r_SM_Main     = 0;
  reg [7:0]    r_Clock_Count = 0;
  reg [2:0]    r_Bit_Index   = 0;
  reg [7:0]    r_Tx_Data     = 0;
  reg          r_Tx_Done     = 0;
  reg          r_Tx_Active   = 0;
     
  always @(posedge i_Clock)
    begin
       
      case (r_SM_Main)
        s_IDLE :
          begin
            o_Tx_Serial   <= 1'b1;         // Drive Line High for Idle
            r_Tx_Done     <= 1'b0;
            r_Clock_Count <= 0;
            r_Bit_Index   <= 0;
             
            if (i_Tx_DV == 1'b1)
              begin
                r_Tx_Active <= 1'b1;
                r_Tx_Data   <= i_Tx_Byte;
                r_SM_Main   <= s_TX_START_BIT;
              end
            else
              r_SM_Main <= s_IDLE;
          end // case: s_IDLE
         
         
        // Send out Start Bit. Start bit = 0
        s_TX_START_BIT :
          begin
            o_Tx_Serial <= 1'b0;
             
            // Wait CLKS_PER_BIT-1 clock cycles for start bit to finish
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_TX_START_BIT;
              end
            else
              begin
                r_Clock_Count <= 0;
                r_SM_Main     <= s_TX_DATA_BITS;
              end
          end // case: s_TX_START_BIT
         
         
        // Wait CLKS_PER_BIT-1 clock cycles for data bits to finish         
        s_TX_DATA_BITS :
          begin
            o_Tx_Serial <= r_Tx_Data[r_Bit_Index];
             
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_TX_DATA_BITS;
              end
            else
              begin
                r_Clock_Count <= 0;
                 
                // Check if we have sent out all bits
                if (r_Bit_Index < 7)
                  begin
                    r_Bit_Index <= r_Bit_Index + 1;
                    r_SM_Main   <= s_TX_DATA_BITS;
                  end
                else
                  begin
                    r_Bit_Index <= 0;
                    r_SM_Main   <= s_TX_STOP_BIT;
                  end
              end
          end // case: s_TX_DATA_BITS
         
         
        // Send out Stop bit.  Stop bit = 1
        s_TX_STOP_BIT :
          begin
            o_Tx_Serial <= 1'b1;
             
            // Wait CLKS_PER_BIT-1 clock cycles for Stop bit to finish
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_TX_STOP_BIT;
              end
            else
              begin
                r_Tx_Done     <= 1'b1;
                r_Clock_Count <= 0;
                r_SM_Main     <= s_CLEANUP;
                r_Tx_Active   <= 1'b0;
              end
          end // case: s_Tx_STOP_BIT
         
         
        // Stay here 1 clock
        s_CLEANUP :
          begin
            r_Tx_Done <= 1'b1;
            r_SM_Main <= s_IDLE;
          end
         
         
        default :
          r_SM_Main <= s_IDLE;
         
      endcase
    end
 
  assign o_Tx_Active = r_Tx_Active;
  assign o_Tx_Done   = r_Tx_Done;
   
endmodule

