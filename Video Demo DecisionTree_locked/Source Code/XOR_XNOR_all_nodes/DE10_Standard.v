
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_Standard(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		 reg    [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire RxD;
reg seg7_disp_off_signal;

parameter storage_length = 784;
reg transmit;
wire transmit_debounced;
wire tick;
wire [7:0] receive_data;
//reg [7:0] count_value;
wire receive_done;
wire [7:0] mem_data;
reg [9:0] mem_address;
reg [9:0] written_mem_address;
reg mem_wr;
reg first_val_receive;
reg txdone_flag;
reg [7:0] pixels[storage_length-1:0];
reg [7:0] Label;
reg [7:0] serial_transmit_reg;
reg Allpixel_receive_complete;
reg [15:0] state;
reg ml_inference_completed;

reg [251:0] key;
initial key ={1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b0};
 
//=======================================================
//  Structural coding
//=======================================================


Binary_To_7Segment seg1 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label[3:0] : mem_address[3:0]),  .o_Segment_A(HEX0[0]), .o_Segment_B(HEX0[1]),  .o_Segment_C(HEX0[2]), 
                          .o_Segment_D(HEX0[3]), .o_Segment_E(HEX0[4]), .o_Segment_F(HEX0[5]), .o_Segment_G(HEX0[6]));
								  
Binary_To_7Segment seg2 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? 4'b0001 : mem_address[7:4]),  .o_Segment_A(HEX1[0]), .o_Segment_B(HEX1[1]),  .o_Segment_C(HEX1[2]), 
                          .o_Segment_D(HEX1[3]), .o_Segment_E(HEX1[4]), .o_Segment_F(HEX1[5]), .o_Segment_G(HEX1[6]));
								  
Binary_To_7Segment seg3 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? 4'b1110 : mem_address[9:8]),  .o_Segment_A(HEX2[0]), .o_Segment_B(HEX2[1]),  .o_Segment_C(HEX2[2]), 
                          .o_Segment_D(HEX2[3]), .o_Segment_E(HEX2[4]), .o_Segment_F(HEX2[5]), .o_Segment_G(HEX2[6]));
								  
								  
Binary_To_7Segment seg4 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? 4'b1011 : written_mem_address[3:0]),  .o_Segment_A(HEX3[0]), .o_Segment_B(HEX3[1]),  .o_Segment_C(HEX3[2]), 
                          .o_Segment_D(HEX3[3]), .o_Segment_E(HEX3[4]), .o_Segment_F(HEX3[5]), .o_Segment_G(HEX3[6]));
								  
Binary_To_7Segment seg5 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? 4'b1010 : written_mem_address[7:4]),  .o_Segment_A(HEX4[0]), .o_Segment_B(HEX4[1]),  .o_Segment_C(HEX4[2]), 
                          .o_Segment_D(HEX4[3]), .o_Segment_E(HEX4[4]), .o_Segment_F(HEX4[5]), .o_Segment_G(HEX4[6]));
								  
Binary_To_7Segment seg6 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? 4'b0001 : written_mem_address[9:8]),  .o_Segment_A(HEX5[0]), .o_Segment_B(HEX5[1]),  .o_Segment_C(HEX5[2]), 
                          .o_Segment_D(HEX5[3]), .o_Segment_E(HEX5[4]), .o_Segment_F(HEX5[5]), .o_Segment_G(HEX5[6]));

					  
								  
assign RxD = GPIO[0];  //UART receiver pin for FPGA
// GPIO[1];  //UART transmitter Pin for FPGA


uart_rx R3 (.i_Clock(CLOCK_50), .i_Rx_Serial(RxD), .o_Rx_DV(receive_done), .o_Rx_Byte(receive_data) );

always @ (posedge receive_done)
begin
      if (SW[0] == 1)    begin LEDR[1] <= 0; end
      else begin LEDR[1] <= ~LEDR[1]; end
end

always @ (posedge CLOCK_50)
begin
    if (receive_done == 1)
        begin
        mem_address <= mem_address+1;   written_mem_address <= mem_address; 
        pixels[mem_address] <= receive_data;
        if (mem_address >= storage_length-1)
        begin Allpixel_receive_complete <=1; end
        else
        begin Allpixel_receive_complete <=0; end
        end
            
     if (SW[0] == 1)
         begin
            mem_address <= 0;
				seg7_disp_off_signal <=0;
         end
     
     if (tick == 1)
         begin
           if (txdone_flag == 0 )
               begin
                    txdone_flag <= 1;
               end
           else 
               begin
                    mem_address <= mem_address+1;
                    txdone_flag <= 0;
               end              
         end
     
     if (mem_address < written_mem_address && SW[1]== 1)
     begin
        transmit <= 1;    
        serial_transmit_reg <= pixels[mem_address];    
     end
     else if (mem_address == written_mem_address && SW[1]== 1)
     begin 
        transmit <= 1;   
        serial_transmit_reg <= Label;    
     end
     else
     begin
        transmit <=0; 
     end 
	  
	  if (SW[2] == 1)
         begin
				seg7_disp_off_signal <= 1;
         end
end

uart_tx T1 (.i_Clock(CLOCK_50), .i_Tx_DV(transmit), .i_Tx_Byte(serial_transmit_reg), .o_Tx_Active(), .o_Tx_Serial(GPIO[1]), .o_Tx_Done(tick) );



always @ (posedge CLOCK_50)
    begin
    if (SW[0] == 1)
         begin
            state <= 0;
         end
         
    if (Allpixel_receive_complete==1)
        begin
 case (state) 

16'd0:if ((pixels[350] <= 141) && ((pixels[350] <= 141) ^ key[0])==(pixels[350] <= 141)) begin state<=1; end  else begin state<=250; end 
 
16'd1:if ((pixels[568] <= 0) && ((pixels[568] <= 0) ^ key[1])==(pixels[568] <= 0)) begin state<=2; end  else begin state<=125; end 
 
16'd2:if ((pixels[430] <= 0) && ((pixels[430] <= 0) ~^ key[2])==(pixels[430] <= 0)) begin state<=3; end  else begin state<=66; end 
 
16'd3:if ((pixels[405] <= 0) && ((pixels[405] <= 0) ^ key[3])==(pixels[405] <= 0)) begin state<=4; end  else begin state<=35; end 
 
16'd4:if ((pixels[484] <= 39) && ((pixels[484] <= 39) ~^ key[4])==(pixels[484] <= 39)) begin state<=5; end  else begin state<=20; end 
 
16'd5:if ((pixels[154] <= 1) && ((pixels[154] <= 1) ~^ key[5])==(pixels[154] <= 1)) begin state<=6; end  else begin state<=13; end 
 
16'd6:if ((pixels[594] <= 6) && ((pixels[594] <= 6) ^ key[6])==(pixels[594] <= 6)) begin state<=7; end  else begin state<=10; end 
 
16'd7:if ((pixels[157] <= 1) && ((pixels[157] <= 1) ~^ key[7])==(pixels[157] <= 1)) begin Label<=7; state<=0;ml_inference_completed<=1; end 
       else begin Label<=1; state<=0;ml_inference_completed<=1; end 

16'd10:if ((pixels[481] <= 28) && ((pixels[481] <= 28) ~^ key[8])==(pixels[481] <= 28)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=0; state<=0;ml_inference_completed<=1; end 

16'd13:if ((pixels[509] <= 22) && ((pixels[509] <= 22) ~^ key[9])==(pixels[509] <= 22)) begin state<=14; end  else begin state<=17; end 
 
16'd14:if ((pixels[571] <= 9) && ((pixels[571] <= 9) ^ key[10])==(pixels[571] <= 9)) begin Label<=3; state<=0;ml_inference_completed<=1; end 
       else begin Label<=2; state<=0;ml_inference_completed<=1; end 

16'd17:if ((pixels[350] <= 3) && ((pixels[350] <= 3) ~^ key[11])==(pixels[350] <= 3)) begin Label<=0; state<=0;ml_inference_completed<=1; end 
       else begin Label<=3; state<=0;ml_inference_completed<=1; end 

16'd20:if ((pixels[211] <= 53) && ((pixels[211] <= 53) ~^ key[12])==(pixels[211] <= 53)) begin state<=21; end  else begin state<=28; end 
 
16'd21:if ((pixels[487] <= 153) && ((pixels[487] <= 153) ~^ key[13])==(pixels[487] <= 153)) begin state<=22; end  else begin state<=25; end 
 
16'd22:if ((pixels[543] <= 179) && ((pixels[543] <= 179) ^ key[14])==(pixels[543] <= 179)) begin Label<=7; state<=0;ml_inference_completed<=1; end 
       else begin Label<=6; state<=0;ml_inference_completed<=1; end 

16'd25:if ((pixels[399] <= 4) && ((pixels[399] <= 4) ^ key[15])==(pixels[399] <= 4)) begin Label<=2; state<=0;ml_inference_completed<=1; end 
       else begin Label<=4; state<=0;ml_inference_completed<=1; end 

16'd28:if ((pixels[437] <= 1) && ((pixels[437] <= 1) ^ key[16])==(pixels[437] <= 1)) begin state<=29; end  else begin state<=32; end 
 
16'd29:if ((pixels[386] <= 2) && ((pixels[386] <= 2) ^ key[17])==(pixels[386] <= 2)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=0; state<=0;ml_inference_completed<=1; end 

16'd32:if ((pixels[427] <= 0) && ((pixels[427] <= 0) ^ key[18])==(pixels[427] <= 0)) begin Label<=7; state<=0;ml_inference_completed<=1; end 
       else begin Label<=9; state<=0;ml_inference_completed<=1; end 

16'd35:if ((pixels[516] <= 0) && ((pixels[516] <= 0) ^ key[19])==(pixels[516] <= 0)) begin state<=36; end  else begin state<=51; end 
 
16'd36:if ((pixels[353] <= 2) && ((pixels[353] <= 2) ^ key[20])==(pixels[353] <= 2)) begin state<=37; end  else begin state<=44; end 
 
16'd37:if ((pixels[322] <= 10) && ((pixels[322] <= 10) ~^ key[21])==(pixels[322] <= 10)) begin state<=38; end  else begin state<=41; end 
 
16'd38:if ((pixels[355] <= 12) && ((pixels[355] <= 12) ^ key[22])==(pixels[355] <= 12)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=4; state<=0;ml_inference_completed<=1; end 

16'd41:if ((pixels[546] <= 38) && ((pixels[546] <= 38) ~^ key[23])==(pixels[546] <= 38)) begin Label<=3; state<=0;ml_inference_completed<=1; end 
       else begin Label<=1; state<=0;ml_inference_completed<=1; end 

16'd44:if ((pixels[346] <= 1) && ((pixels[346] <= 1) ^ key[24])==(pixels[346] <= 1)) begin state<=45; end  else begin state<=48; end 
 
16'd45:if ((pixels[652] <= 59) && ((pixels[652] <= 59) ^ key[25])==(pixels[652] <= 59)) begin Label<=3; state<=0;ml_inference_completed<=1; end 
       else begin Label<=3; state<=0;ml_inference_completed<=1; end 

16'd48:if ((pixels[210] <= 6) && ((pixels[210] <= 6) ~^ key[26])==(pixels[210] <= 6)) begin Label<=4; state<=0;ml_inference_completed<=1; end 
       else begin Label<=9; state<=0;ml_inference_completed<=1; end 

16'd51:if ((pixels[376] <= 16) && ((pixels[376] <= 16) ^ key[27])==(pixels[376] <= 16)) begin state<=52; end  else begin state<=59; end 
 
16'd52:if ((pixels[208] <= 1) && ((pixels[208] <= 1) ^ key[28])==(pixels[208] <= 1)) begin state<=53; end  else begin state<=56; end 
 
16'd53:if ((pixels[289] <= 0) && ((pixels[289] <= 0) ^ key[29])==(pixels[289] <= 0)) begin Label<=1; state<=0;ml_inference_completed<=1; end 
       else begin Label<=7; state<=0;ml_inference_completed<=1; end 

16'd56:if ((pixels[710] <= 15) && ((pixels[710] <= 15) ~^ key[30])==(pixels[710] <= 15)) begin Label<=2; state<=0;ml_inference_completed<=1; end 
       else begin Label<=7; state<=0;ml_inference_completed<=1; end 

16'd59:if ((pixels[658] <= 1) && ((pixels[658] <= 1) ^ key[31])==(pixels[658] <= 1)) begin state<=60; end  else begin state<=63; end 
 
16'd60:if ((pixels[459] <= 14) && ((pixels[459] <= 14) ~^ key[32])==(pixels[459] <= 14)) begin Label<=9; state<=0;ml_inference_completed<=1; end 
       else begin Label<=6; state<=0;ml_inference_completed<=1; end 

16'd63:if ((pixels[434] <= 85) && ((pixels[434] <= 85) ~^ key[33])==(pixels[434] <= 85)) begin Label<=8; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd66:if ((pixels[211] <= 28) && ((pixels[211] <= 28) ^ key[34])==(pixels[211] <= 28)) begin state<=67; end  else begin state<=94; end 
 
16'd67:if ((pixels[98] <= 0) && ((pixels[98] <= 0) ~^ key[35])==(pixels[98] <= 0)) begin state<=68; end  else begin state<=83; end 
 
16'd68:if ((pixels[267] <= 121) && ((pixels[267] <= 121) ^ key[36])==(pixels[267] <= 121)) begin state<=69; end  else begin state<=76; end 
 
16'd69:if ((pixels[95] <= 7) && ((pixels[95] <= 7) ^ key[37])==(pixels[95] <= 7)) begin state<=70; end  else begin state<=73; end 
 
16'd70:if ((pixels[155] <= 78) && ((pixels[155] <= 78) ~^ key[38])==(pixels[155] <= 78)) begin Label<=4; state<=0;ml_inference_completed<=1; end 
       else begin Label<=6; state<=0;ml_inference_completed<=1; end 

16'd73:if ((pixels[242] <= 104) && ((pixels[242] <= 104) ~^ key[39])==(pixels[242] <= 104)) begin Label<=6; state<=0;ml_inference_completed<=1; end 
       else begin Label<=4; state<=0;ml_inference_completed<=1; end 

16'd76:if ((pixels[353] <= 1) && ((pixels[353] <= 1) ~^ key[40])==(pixels[353] <= 1)) begin state<=77; end  else begin state<=80; end 
 
16'd77:if ((pixels[411] <= 114) && ((pixels[411] <= 114) ^ key[41])==(pixels[411] <= 114)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=7; state<=0;ml_inference_completed<=1; end 

16'd80:if ((pixels[432] <= 12) && ((pixels[432] <= 12) ^ key[42])==(pixels[432] <= 12)) begin Label<=7; state<=0;ml_inference_completed<=1; end 
       else begin Label<=9; state<=0;ml_inference_completed<=1; end 

16'd83:if ((pixels[537] <= 24) && ((pixels[537] <= 24) ~^ key[43])==(pixels[537] <= 24)) begin state<=84; end  else begin state<=91; end 
 
16'd84:if ((pixels[242] <= 44) && ((pixels[242] <= 44) ^ key[44])==(pixels[242] <= 44)) begin state<=85; end  else begin state<=88; end 
 
16'd85:if ((pixels[243] <= 90) && ((pixels[243] <= 90) ~^ key[45])==(pixels[243] <= 90)) begin Label<=6; state<=0;ml_inference_completed<=1; end 
       else begin Label<=4; state<=0;ml_inference_completed<=1; end 

16'd88:if ((pixels[262] <= 9) && ((pixels[262] <= 9) ~^ key[46])==(pixels[262] <= 9)) begin Label<=2; state<=0;ml_inference_completed<=1; end 
       else begin Label<=0; state<=0;ml_inference_completed<=1; end 

16'd91:if ((pixels[265] <= 126) && ((pixels[265] <= 126) ~^ key[47])==(pixels[265] <= 126)) begin Label<=2; state<=0;ml_inference_completed<=1; end 
       else begin Label<=4; state<=0;ml_inference_completed<=1; end 

16'd94:if ((pixels[156] <= 0) && ((pixels[156] <= 0) ^ key[48])==(pixels[156] <= 0)) begin state<=95; end  else begin state<=110; end 
 
16'd95:if ((pixels[381] <= 2) && ((pixels[381] <= 2) ~^ key[49])==(pixels[381] <= 2)) begin state<=96; end  else begin state<=103; end 
 
16'd96:if ((pixels[217] <= 1) && ((pixels[217] <= 1) ~^ key[50])==(pixels[217] <= 1)) begin state<=97; end  else begin state<=100; end 
 
16'd97:if ((pixels[542] <= 77) && ((pixels[542] <= 77) ~^ key[51])==(pixels[542] <= 77)) begin Label<=9; state<=0;ml_inference_completed<=1; end 
       else begin Label<=0; state<=0;ml_inference_completed<=1; end 

16'd100:if ((pixels[384] <= 33) && ((pixels[384] <= 33) ^ key[52])==(pixels[384] <= 33)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=9; state<=0;ml_inference_completed<=1; end 

16'd103:if ((pixels[317] <= 0) && ((pixels[317] <= 0) ^ key[53])==(pixels[317] <= 0)) begin state<=104; end  else begin state<=107; end 
 
16'd104:if ((pixels[342] <= 1) && ((pixels[342] <= 1) ^ key[54])==(pixels[342] <= 1)) begin Label<=9; state<=0;ml_inference_completed<=1; end 
       else begin Label<=9; state<=0;ml_inference_completed<=1; end 

16'd107:if ((pixels[219] <= 18) && ((pixels[219] <= 18) ^ key[55])==(pixels[219] <= 18)) begin Label<=9; state<=0;ml_inference_completed<=1; end 
       else begin Label<=4; state<=0;ml_inference_completed<=1; end 

16'd110:if ((pixels[101] <= 1) && ((pixels[101] <= 1) ~^ key[56])==(pixels[101] <= 1)) begin state<=111; end  else begin state<=118; end 
 
16'd111:if ((pixels[656] <= 1) && ((pixels[656] <= 1) ~^ key[57])==(pixels[656] <= 1)) begin state<=112; end  else begin state<=115; end 
 
16'd112:if ((pixels[572] <= 1) && ((pixels[572] <= 1) ~^ key[58])==(pixels[572] <= 1)) begin Label<=4; state<=0;ml_inference_completed<=1; end 
       else begin Label<=6; state<=0;ml_inference_completed<=1; end 

16'd115:if ((pixels[326] <= 0) && ((pixels[326] <= 0) ~^ key[59])==(pixels[326] <= 0)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd118:if ((pixels[271] <= 136) && ((pixels[271] <= 136) ^ key[60])==(pixels[271] <= 136)) begin state<=119; end  else begin state<=122; end 
 
16'd119:if ((pixels[514] <= 3) && ((pixels[514] <= 3) ~^ key[61])==(pixels[514] <= 3)) begin Label<=6; state<=0;ml_inference_completed<=1; end 
       else begin Label<=6; state<=0;ml_inference_completed<=1; end 

16'd122:if ((pixels[319] <= 24) && ((pixels[319] <= 24) ^ key[62])==(pixels[319] <= 24)) begin Label<=2; state<=0;ml_inference_completed<=1; end 
       else begin Label<=0; state<=0;ml_inference_completed<=1; end 

16'd125:if ((pixels[435] <= 0) && ((pixels[435] <= 0) ^ key[63])==(pixels[435] <= 0)) begin state<=126; end  else begin state<=187; end 
 
16'd126:if ((pixels[489] <= 47) && ((pixels[489] <= 47) ~^ key[64])==(pixels[489] <= 47)) begin state<=127; end  else begin state<=158; end 
 
16'd127:if ((pixels[380] <= 1) && ((pixels[380] <= 1) ^ key[65])==(pixels[380] <= 1)) begin state<=128; end  else begin state<=143; end 
 
16'd128:if ((pixels[324] <= 177) && ((pixels[324] <= 177) ^ key[66])==(pixels[324] <= 177)) begin state<=129; end  else begin state<=136; end 
 
16'd129:if ((pixels[73] <= 8) && ((pixels[73] <= 8) ^ key[67])==(pixels[73] <= 8)) begin state<=130; end  else begin state<=133; end 
 
16'd130:if ((pixels[455] <= 1) && ((pixels[455] <= 1) ^ key[68])==(pixels[455] <= 1)) begin Label<=0; state<=0;ml_inference_completed<=1; end 
       else begin Label<=0; state<=0;ml_inference_completed<=1; end 

16'd133:if ((pixels[440] <= 9) && ((pixels[440] <= 9) ~^ key[69])==(pixels[440] <= 9)) begin Label<=0; state<=0;ml_inference_completed<=1; end 
       else begin Label<=6; state<=0;ml_inference_completed<=1; end 

16'd136:if ((pixels[271] <= 2) && ((pixels[271] <= 2) ~^ key[70])==(pixels[271] <= 2)) begin state<=137; end  else begin state<=140; end 
 
16'd137:if ((pixels[240] <= 124) && ((pixels[240] <= 124) ^ key[71])==(pixels[240] <= 124)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=3; state<=0;ml_inference_completed<=1; end 

16'd140:if ((pixels[237] <= 21) && ((pixels[237] <= 21) ^ key[72])==(pixels[237] <= 21)) begin Label<=3; state<=0;ml_inference_completed<=1; end 
       else begin Label<=0; state<=0;ml_inference_completed<=1; end 

16'd143:if ((pixels[484] <= 25) && ((pixels[484] <= 25) ~^ key[73])==(pixels[484] <= 25)) begin state<=144; end  else begin state<=151; end 
 
16'd144:if ((pixels[374] <= 102) && ((pixels[374] <= 102) ^ key[74])==(pixels[374] <= 102)) begin state<=145; end  else begin state<=148; end 
 
16'd145:if ((pixels[514] <= 84) && ((pixels[514] <= 84) ^ key[75])==(pixels[514] <= 84)) begin Label<=3; state<=0;ml_inference_completed<=1; end 
       else begin Label<=2; state<=0;ml_inference_completed<=1; end 

16'd148:if ((pixels[297] <= 241) && ((pixels[297] <= 241) ^ key[76])==(pixels[297] <= 241)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=0; state<=0;ml_inference_completed<=1; end 

16'd151:if ((pixels[270] <= 11) && ((pixels[270] <= 11) ~^ key[77])==(pixels[270] <= 11)) begin state<=152; end  else begin state<=155; end 
 
16'd152:if ((pixels[323] <= 143) && ((pixels[323] <= 143) ^ key[78])==(pixels[323] <= 143)) begin Label<=6; state<=0;ml_inference_completed<=1; end 
       else begin Label<=5; state<=0;ml_inference_completed<=1; end 

16'd155:if ((pixels[379] <= 230) && ((pixels[379] <= 230) ^ key[79])==(pixels[379] <= 230)) begin Label<=0; state<=0;ml_inference_completed<=1; end 
       else begin Label<=2; state<=0;ml_inference_completed<=1; end 

16'd158:if ((pixels[347] <= 1) && ((pixels[347] <= 1) ~^ key[80])==(pixels[347] <= 1)) begin state<=159; end  else begin state<=172; end 
 
16'd159:if ((pixels[344] <= 108) && ((pixels[344] <= 108) ~^ key[81])==(pixels[344] <= 108)) begin state<=160; end  else begin state<=167; end 
 
16'd160:if ((pixels[520] <= 2) && ((pixels[520] <= 2) ^ key[82])==(pixels[520] <= 2)) begin state<=161; end  else begin state<=164; end 
 
16'd161:if ((pixels[377] <= 209) && ((pixels[377] <= 209) ^ key[83])==(pixels[377] <= 209)) begin Label<=3; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd164:if ((pixels[685] <= 27) && ((pixels[685] <= 27) ~^ key[84])==(pixels[685] <= 27)) begin Label<=2; state<=0;ml_inference_completed<=1; end 
       else begin Label<=3; state<=0;ml_inference_completed<=1; end 

16'd167:if ((pixels[512] <= 16) && ((pixels[512] <= 16) ^ key[85])==(pixels[512] <= 16)) begin Label<=5; state<=0;ml_inference_completed<=1; end  else begin state<=169; end 

16'd169:if ((pixels[386] <= 251) && ((pixels[386] <= 251) ^ key[86])==(pixels[386] <= 251)) begin Label<=6; state<=0;ml_inference_completed<=1; end 
       else begin Label<=0; state<=0;ml_inference_completed<=1; end 

16'd172:if ((pixels[358] <= 81) && ((pixels[358] <= 81) ^ key[87])==(pixels[358] <= 81)) begin state<=173; end  else begin state<=180; end 
 
16'd173:if ((pixels[513] <= 71) && ((pixels[513] <= 71) ~^ key[88])==(pixels[513] <= 71)) begin state<=174; end  else begin state<=177; end 
 
16'd174:if ((pixels[408] <= 4) && ((pixels[408] <= 4) ~^ key[89])==(pixels[408] <= 4)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd177:if ((pixels[405] <= 201) && ((pixels[405] <= 201) ^ key[90])==(pixels[405] <= 201)) begin Label<=6; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd180:if ((pixels[400] <= 75) && ((pixels[400] <= 75) ~^ key[91])==(pixels[400] <= 75)) begin state<=181; end  else begin state<=184; end 
 
16'd181:if ((pixels[317] <= 48) && ((pixels[317] <= 48) ~^ key[92])==(pixels[317] <= 48)) begin Label<=2; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd184:if ((pixels[292] <= 27) && ((pixels[292] <= 27) ~^ key[93])==(pixels[292] <= 27)) begin Label<=2; state<=0;ml_inference_completed<=1; end 
       else begin Label<=0; state<=0;ml_inference_completed<=1; end 

16'd187:if ((pixels[347] <= 0) && ((pixels[347] <= 0) ^ key[94])==(pixels[347] <= 0)) begin state<=188; end  else begin state<=219; end 
 
16'd188:if ((pixels[344] <= 27) && ((pixels[344] <= 27) ^ key[95])==(pixels[344] <= 27)) begin state<=189; end  else begin state<=204; end 
 
16'd189:if ((pixels[155] <= 0) && ((pixels[155] <= 0) ^ key[96])==(pixels[155] <= 0)) begin state<=190; end  else begin state<=197; end 
 
16'd190:if ((pixels[652] <= 6) && ((pixels[652] <= 6) ~^ key[97])==(pixels[652] <= 6)) begin state<=191; end  else begin state<=194; end 
 
16'd191:if ((pixels[457] <= 63) && ((pixels[457] <= 63) ^ key[98])==(pixels[457] <= 63)) begin Label<=2; state<=0;ml_inference_completed<=1; end 
       else begin Label<=2; state<=0;ml_inference_completed<=1; end 

16'd194:if ((pixels[238] <= 2) && ((pixels[238] <= 2) ^ key[99])==(pixels[238] <= 2)) begin Label<=1; state<=0;ml_inference_completed<=1; end 
       else begin Label<=7; state<=0;ml_inference_completed<=1; end 

16'd197:if ((pixels[544] <= 2) && ((pixels[544] <= 2) ~^ key[100])==(pixels[544] <= 2)) begin state<=198; end  else begin state<=201; end 
 
16'd198:if ((pixels[513] <= 3) && ((pixels[513] <= 3) ~^ key[101])==(pixels[513] <= 3)) begin Label<=3; state<=0;ml_inference_completed<=1; end 
       else begin Label<=2; state<=0;ml_inference_completed<=1; end 

16'd201:if ((pixels[349] <= 231) && ((pixels[349] <= 231) ~^ key[102])==(pixels[349] <= 231)) begin Label<=2; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd204:if ((pixels[214] <= 5) && ((pixels[214] <= 5) ^ key[103])==(pixels[214] <= 5)) begin state<=205; end  else begin state<=212; end 
 
16'd205:if ((pixels[267] <= 7) && ((pixels[267] <= 7) ^ key[104])==(pixels[267] <= 7)) begin state<=206; end  else begin state<=209; end 
 
16'd206:if ((pixels[217] <= 29) && ((pixels[217] <= 29) ^ key[105])==(pixels[217] <= 29)) begin Label<=6; state<=0;ml_inference_completed<=1; end 
       else begin Label<=4; state<=0;ml_inference_completed<=1; end 

16'd209:if ((pixels[487] <= 2) && ((pixels[487] <= 2) ^ key[106])==(pixels[487] <= 2)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd212:if ((pixels[402] <= 123) && ((pixels[402] <= 123) ~^ key[107])==(pixels[402] <= 123)) begin state<=213; end  else begin state<=216; end 
 
16'd213:if ((pixels[399] <= 32) && ((pixels[399] <= 32) ^ key[108])==(pixels[399] <= 32)) begin Label<=2; state<=0;ml_inference_completed<=1; end 
       else begin Label<=9; state<=0;ml_inference_completed<=1; end 

16'd216:if ((pixels[514] <= 0) && ((pixels[514] <= 0) ~^ key[109])==(pixels[514] <= 0)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd219:if ((pixels[655] <= 0) && ((pixels[655] <= 0) ^ key[110])==(pixels[655] <= 0)) begin state<=220; end  else begin state<=235; end 
 
16'd220:if ((pixels[271] <= 1) && ((pixels[271] <= 1) ^ key[111])==(pixels[271] <= 1)) begin state<=221; end  else begin state<=228; end 
 
16'd221:if ((pixels[484] <= 0) && ((pixels[484] <= 0) ~^ key[112])==(pixels[484] <= 0)) begin state<=222; end  else begin state<=225; end 
 
16'd222:if ((pixels[515] <= 52) && ((pixels[515] <= 52) ^ key[113])==(pixels[515] <= 52)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=6; state<=0;ml_inference_completed<=1; end 

16'd225:if ((pixels[219] <= 2) && ((pixels[219] <= 2) ^ key[114])==(pixels[219] <= 2)) begin Label<=6; state<=0;ml_inference_completed<=1; end 
       else begin Label<=5; state<=0;ml_inference_completed<=1; end 

16'd228:if ((pixels[354] <= 10) && ((pixels[354] <= 10) ~^ key[115])==(pixels[354] <= 10)) begin state<=229; end  else begin state<=232; end 
 
16'd229:if ((pixels[385] <= 4) && ((pixels[385] <= 4) ^ key[116])==(pixels[385] <= 4)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=0; state<=0;ml_inference_completed<=1; end 

16'd232:if ((pixels[156] <= 6) && ((pixels[156] <= 6) ^ key[117])==(pixels[156] <= 6)) begin Label<=4; state<=0;ml_inference_completed<=1; end 
       else begin Label<=2; state<=0;ml_inference_completed<=1; end 

16'd235:if ((pixels[514] <= 16) && ((pixels[514] <= 16) ~^ key[118])==(pixels[514] <= 16)) begin state<=236; end  else begin state<=243; end 
 
16'd236:if ((pixels[355] <= 4) && ((pixels[355] <= 4) ^ key[119])==(pixels[355] <= 4)) begin state<=237; end  else begin state<=240; end 
 
16'd237:if ((pixels[150] <= 134) && ((pixels[150] <= 134) ~^ key[120])==(pixels[150] <= 134)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=3; state<=0;ml_inference_completed<=1; end 

16'd240:if ((pixels[434] <= 41) && ((pixels[434] <= 41) ~^ key[121])==(pixels[434] <= 41)) begin Label<=0; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd243:if ((pixels[428] <= 30) && ((pixels[428] <= 30) ~^ key[122])==(pixels[428] <= 30)) begin state<=244; end  else begin state<=247; end 
 
16'd244:if ((pixels[460] <= 1) && ((pixels[460] <= 1) ~^ key[123])==(pixels[460] <= 1)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd247:if ((pixels[434] <= 27) && ((pixels[434] <= 27) ^ key[124])==(pixels[434] <= 27)) begin Label<=0; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd250:if ((pixels[489] <= 26) && ((pixels[489] <= 26) ~^ key[125])==(pixels[489] <= 26)) begin state<=251; end  else begin state<=378; end 
 
16'd251:if ((pixels[290] <= 33) && ((pixels[290] <= 33) ^ key[126])==(pixels[290] <= 33)) begin state<=252; end  else begin state<=315; end 
 
16'd252:if ((pixels[486] <= 57) && ((pixels[486] <= 57) ^ key[127])==(pixels[486] <= 57)) begin state<=253; end  else begin state<=284; end 
 
16'd253:if ((pixels[296] <= 2) && ((pixels[296] <= 2) ^ key[128])==(pixels[296] <= 2)) begin state<=254; end  else begin state<=269; end 
 
16'd254:if ((pixels[490] <= 87) && ((pixels[490] <= 87) ^ key[129])==(pixels[490] <= 87)) begin state<=255; end  else begin state<=262; end 
 
16'd255:if ((pixels[315] <= 18) && ((pixels[315] <= 18) ^ key[130])==(pixels[315] <= 18)) begin state<=256; end  else begin state<=259; end 
 
16'd256:if ((pixels[177] <= 1) && ((pixels[177] <= 1) ^ key[131])==(pixels[177] <= 1)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=3; state<=0;ml_inference_completed<=1; end 

16'd259:if ((pixels[328] <= 86) && ((pixels[328] <= 86) ^ key[132])==(pixels[328] <= 86)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=4; state<=0;ml_inference_completed<=1; end 

16'd262:if ((pixels[600] <= 1) && ((pixels[600] <= 1) ~^ key[133])==(pixels[600] <= 1)) begin state<=263; end  else begin state<=266; end 
 
16'd263:if ((pixels[457] <= 3) && ((pixels[457] <= 3) ^ key[134])==(pixels[457] <= 3)) begin Label<=1; state<=0;ml_inference_completed<=1; end 
       else begin Label<=7; state<=0;ml_inference_completed<=1; end 

16'd266:if ((pixels[354] <= 76) && ((pixels[354] <= 76) ~^ key[135])==(pixels[354] <= 76)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd269:if ((pixels[180] <= 3) && ((pixels[180] <= 3) ^ key[136])==(pixels[180] <= 3)) begin state<=270; end  else begin state<=277; end 
 
16'd270:if ((pixels[156] <= 1) && ((pixels[156] <= 1) ^ key[137])==(pixels[156] <= 1)) begin state<=271; end  else begin state<=274; end 
 
16'd271:if ((pixels[538] <= 1) && ((pixels[538] <= 1) ~^ key[138])==(pixels[538] <= 1)) begin Label<=9; state<=0;ml_inference_completed<=1; end 
       else begin Label<=5; state<=0;ml_inference_completed<=1; end 

16'd274:if ((pixels[265] <= 143) && ((pixels[265] <= 143) ~^ key[139])==(pixels[265] <= 143)) begin Label<=3; state<=0;ml_inference_completed<=1; end 
       else begin Label<=5; state<=0;ml_inference_completed<=1; end 

16'd277:if ((pixels[316] <= 112) && ((pixels[316] <= 112) ~^ key[140])==(pixels[316] <= 112)) begin state<=278; end  else begin state<=281; end 
 
16'd278:if ((pixels[488] <= 58) && ((pixels[488] <= 58) ~^ key[141])==(pixels[488] <= 58)) begin Label<=3; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd281:if ((pixels[497] <= 13) && ((pixels[497] <= 13) ^ key[142])==(pixels[497] <= 13)) begin Label<=9; state<=0;ml_inference_completed<=1; end 
       else begin Label<=3; state<=0;ml_inference_completed<=1; end 

16'd284:if ((pixels[656] <= 0) && ((pixels[656] <= 0) ~^ key[143])==(pixels[656] <= 0)) begin state<=285; end  else begin state<=300; end 
 
16'd285:if ((pixels[152] <= 8) && ((pixels[152] <= 8) ~^ key[144])==(pixels[152] <= 8)) begin state<=286; end  else begin state<=293; end 
 
16'd286:if ((pixels[601] <= 74) && ((pixels[601] <= 74) ^ key[145])==(pixels[601] <= 74)) begin state<=287; end  else begin state<=290; end 
 
16'd287:if ((pixels[189] <= 16) && ((pixels[189] <= 16) ~^ key[146])==(pixels[189] <= 16)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=1; state<=0;ml_inference_completed<=1; end 

16'd290:if ((pixels[271] <= 2) && ((pixels[271] <= 2) ~^ key[147])==(pixels[271] <= 2)) begin Label<=6; state<=0;ml_inference_completed<=1; end 
       else begin Label<=0; state<=0;ml_inference_completed<=1; end 

16'd293:if ((pixels[465] <= 11) && ((pixels[465] <= 11) ^ key[148])==(pixels[465] <= 11)) begin state<=294; end  else begin state<=297; end 
 
16'd294:if ((pixels[371] <= 35) && ((pixels[371] <= 35) ~^ key[149])==(pixels[371] <= 35)) begin Label<=2; state<=0;ml_inference_completed<=1; end 
       else begin Label<=6; state<=0;ml_inference_completed<=1; end 

16'd297:if ((pixels[431] <= 41) && ((pixels[431] <= 41) ^ key[150])==(pixels[431] <= 41)) begin Label<=3; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd300:if ((pixels[467] <= 68) && ((pixels[467] <= 68) ~^ key[151])==(pixels[467] <= 68)) begin state<=301; end  else begin state<=308; end 
 
16'd301:if ((pixels[435] <= 21) && ((pixels[435] <= 21) ^ key[152])==(pixels[435] <= 21)) begin state<=302; end  else begin state<=305; end 
 
16'd302:if ((pixels[125] <= 13) && ((pixels[125] <= 13) ~^ key[153])==(pixels[125] <= 13)) begin Label<=8; state<=0;ml_inference_completed<=1; end 
       else begin Label<=2; state<=0;ml_inference_completed<=1; end 

16'd305:if ((pixels[293] <= 26) && ((pixels[293] <= 26) ~^ key[154])==(pixels[293] <= 26)) begin Label<=8; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd308:if ((pixels[179] <= 3) && ((pixels[179] <= 3) ^ key[155])==(pixels[179] <= 3)) begin state<=309; end  else begin state<=312; end 
 
16'd309:if ((pixels[356] <= 20) && ((pixels[356] <= 20) ^ key[156])==(pixels[356] <= 20)) begin Label<=6; state<=0;ml_inference_completed<=1; end 
       else begin Label<=0; state<=0;ml_inference_completed<=1; end 

16'd312:if ((pixels[316] <= 65) && ((pixels[316] <= 65) ^ key[157])==(pixels[316] <= 65)) begin Label<=3; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd315:if ((pixels[297] <= 3) && ((pixels[297] <= 3) ~^ key[158])==(pixels[297] <= 3)) begin state<=316; end  else begin state<=347; end 
 
16'd316:if ((pixels[486] <= 58) && ((pixels[486] <= 58) ^ key[159])==(pixels[486] <= 58)) begin state<=317; end  else begin state<=332; end 
 
16'd317:if ((pixels[186] <= 2) && ((pixels[186] <= 2) ~^ key[160])==(pixels[186] <= 2)) begin state<=318; end  else begin state<=325; end 
 
16'd318:if ((pixels[293] <= 214) && ((pixels[293] <= 214) ~^ key[161])==(pixels[293] <= 214)) begin state<=319; end  else begin state<=322; end 
 
16'd319:if ((pixels[464] <= 79) && ((pixels[464] <= 79) ^ key[162])==(pixels[464] <= 79)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=4; state<=0;ml_inference_completed<=1; end 

16'd322:if ((pixels[491] <= 189) && ((pixels[491] <= 189) ~^ key[163])==(pixels[491] <= 189)) begin Label<=3; state<=0;ml_inference_completed<=1; end 
       else begin Label<=1; state<=0;ml_inference_completed<=1; end 

16'd325:if ((pixels[301] <= 54) && ((pixels[301] <= 54) ^ key[164])==(pixels[301] <= 54)) begin state<=326; end  else begin state<=329; end 
 
16'd326:if ((pixels[299] <= 81) && ((pixels[299] <= 81) ~^ key[165])==(pixels[299] <= 81)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd329:if ((pixels[381] <= 22) && ((pixels[381] <= 22) ^ key[166])==(pixels[381] <= 22)) begin Label<=0; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd332:if ((pixels[656] <= 7) && ((pixels[656] <= 7) ~^ key[167])==(pixels[656] <= 7)) begin state<=333; end  else begin state<=340; end 
 
16'd333:if ((pixels[373] <= 13) && ((pixels[373] <= 13) ^ key[168])==(pixels[373] <= 13)) begin state<=334; end  else begin state<=337; end 
 
16'd334:if ((pixels[374] <= 207) && ((pixels[374] <= 207) ~^ key[169])==(pixels[374] <= 207)) begin Label<=8; state<=0;ml_inference_completed<=1; end 
       else begin Label<=6; state<=0;ml_inference_completed<=1; end 

16'd337:if ((pixels[514] <= 39) && ((pixels[514] <= 39) ~^ key[170])==(pixels[514] <= 39)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=6; state<=0;ml_inference_completed<=1; end 

16'd340:if ((pixels[440] <= 34) && ((pixels[440] <= 34) ~^ key[171])==(pixels[440] <= 34)) begin state<=341; end  else begin state<=344; end 
 
16'd341:if ((pixels[153] <= 5) && ((pixels[153] <= 5) ~^ key[172])==(pixels[153] <= 5)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd344:if ((pixels[300] <= 16) && ((pixels[300] <= 16) ^ key[173])==(pixels[300] <= 16)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=0; state<=0;ml_inference_completed<=1; end 

16'd347:if ((pixels[598] <= 0) && ((pixels[598] <= 0) ^ key[174])==(pixels[598] <= 0)) begin state<=348; end  else begin state<=363; end 
 
16'd348:if ((pixels[210] <= 4) && ((pixels[210] <= 4) ~^ key[175])==(pixels[210] <= 4)) begin state<=349; end  else begin state<=356; end 
 
16'd349:if ((pixels[405] <= 7) && ((pixels[405] <= 7) ~^ key[176])==(pixels[405] <= 7)) begin state<=350; end  else begin state<=353; end 
 
16'd350:if ((pixels[320] <= 212) && ((pixels[320] <= 212) ~^ key[177])==(pixels[320] <= 212)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=7; state<=0;ml_inference_completed<=1; end 

16'd353:if ((pixels[408] <= 174) && ((pixels[408] <= 174) ^ key[178])==(pixels[408] <= 174)) begin Label<=6; state<=0;ml_inference_completed<=1; end 
       else begin Label<=4; state<=0;ml_inference_completed<=1; end 

16'd356:if ((pixels[653] <= 67) && ((pixels[653] <= 67) ^ key[179])==(pixels[653] <= 67)) begin state<=357; end  else begin state<=360; end 
 
16'd357:if ((pixels[154] <= 43) && ((pixels[154] <= 43) ~^ key[180])==(pixels[154] <= 43)) begin Label<=9; state<=0;ml_inference_completed<=1; end 
       else begin Label<=9; state<=0;ml_inference_completed<=1; end 

16'd360:if ((pixels[319] <= 64) && ((pixels[319] <= 64) ^ key[181])==(pixels[319] <= 64)) begin Label<=3; state<=0;ml_inference_completed<=1; end 
       else begin Label<=5; state<=0;ml_inference_completed<=1; end 

16'd363:if ((pixels[486] <= 9) && ((pixels[486] <= 9) ~^ key[182])==(pixels[486] <= 9)) begin state<=364; end  else begin state<=371; end 
 
16'd364:if ((pixels[427] <= 168) && ((pixels[427] <= 168) ^ key[183])==(pixels[427] <= 168)) begin state<=365; end  else begin state<=368; end 
 
16'd365:if ((pixels[269] <= 1) && ((pixels[269] <= 1) ~^ key[184])==(pixels[269] <= 1)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=3; state<=0;ml_inference_completed<=1; end 

16'd368:if ((pixels[381] <= 147) && ((pixels[381] <= 147) ~^ key[185])==(pixels[381] <= 147)) begin Label<=0; state<=0;ml_inference_completed<=1; end 
       else begin Label<=5; state<=0;ml_inference_completed<=1; end 

16'd371:if ((pixels[400] <= 23) && ((pixels[400] <= 23) ^ key[186])==(pixels[400] <= 23)) begin state<=372; end  else begin state<=375; end 
 
16'd372:if ((pixels[573] <= 238) && ((pixels[573] <= 238) ~^ key[187])==(pixels[573] <= 238)) begin Label<=8; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd375:if ((pixels[242] <= 10) && ((pixels[242] <= 10) ^ key[188])==(pixels[242] <= 10)) begin Label<=6; state<=0;ml_inference_completed<=1; end 
       else begin Label<=0; state<=0;ml_inference_completed<=1; end 

16'd378:if ((pixels[234] <= 0) && ((pixels[234] <= 0) ~^ key[189])==(pixels[234] <= 0)) begin state<=379; end  else begin state<=442; end 
 
16'd379:if ((pixels[402] <= 0) && ((pixels[402] <= 0) ^ key[190])==(pixels[402] <= 0)) begin state<=380; end  else begin state<=411; end 
 
16'd380:if ((pixels[300] <= 20) && ((pixels[300] <= 20) ~^ key[191])==(pixels[300] <= 20)) begin state<=381; end  else begin state<=396; end 
 
16'd381:if ((pixels[149] <= 2) && ((pixels[149] <= 2) ~^ key[192])==(pixels[149] <= 2)) begin state<=382; end  else begin state<=389; end 
 
16'd382:if ((pixels[494] <= 4) && ((pixels[494] <= 4) ~^ key[193])==(pixels[494] <= 4)) begin state<=383; end  else begin state<=386; end 
 
16'd383:if ((pixels[539] <= 64) && ((pixels[539] <= 64) ^ key[194])==(pixels[539] <= 64)) begin Label<=1; state<=0;ml_inference_completed<=1; end 
       else begin Label<=5; state<=0;ml_inference_completed<=1; end 

16'd386:if ((pixels[657] <= 87) && ((pixels[657] <= 87) ^ key[195])==(pixels[657] <= 87)) begin Label<=6; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd389:if ((pixels[543] <= 74) && ((pixels[543] <= 74) ~^ key[196])==(pixels[543] <= 74)) begin state<=390; end  else begin state<=393; end 
 
16'd390:if ((pixels[296] <= 101) && ((pixels[296] <= 101) ^ key[197])==(pixels[296] <= 101)) begin Label<=1; state<=0;ml_inference_completed<=1; end 
       else begin Label<=3; state<=0;ml_inference_completed<=1; end 

16'd393:if ((pixels[319] <= 68) && ((pixels[319] <= 68) ~^ key[198])==(pixels[319] <= 68)) begin Label<=2; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd396:if ((pixels[183] <= 1) && ((pixels[183] <= 1) ^ key[199])==(pixels[183] <= 1)) begin state<=397; end  else begin state<=404; end 
 
16'd397:if ((pixels[188] <= 180) && ((pixels[188] <= 180) ^ key[200])==(pixels[188] <= 180)) begin state<=398; end  else begin state<=401; end 
 
16'd398:if ((pixels[551] <= 10) && ((pixels[551] <= 10) ^ key[201])==(pixels[551] <= 10)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=6; state<=0;ml_inference_completed<=1; end 

16'd401:if ((pixels[265] <= 11) && ((pixels[265] <= 11) ^ key[202])==(pixels[265] <= 11)) begin Label<=1; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd404:if ((pixels[487] <= 49) && ((pixels[487] <= 49) ~^ key[203])==(pixels[487] <= 49)) begin state<=405; end  else begin state<=408; end 
 
16'd405:if ((pixels[155] <= 7) && ((pixels[155] <= 7) ^ key[204])==(pixels[155] <= 7)) begin Label<=9; state<=0;ml_inference_completed<=1; end 
       else begin Label<=3; state<=0;ml_inference_completed<=1; end 

16'd408:if ((pixels[434] <= 146) && ((pixels[434] <= 146) ~^ key[205])==(pixels[434] <= 146)) begin Label<=3; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd411:if ((pixels[103] <= 1) && ((pixels[103] <= 1) ^ key[206])==(pixels[103] <= 1)) begin state<=412; end  else begin state<=427; end 
 
16'd412:if ((pixels[276] <= 0) && ((pixels[276] <= 0) ~^ key[207])==(pixels[276] <= 0)) begin state<=413; end  else begin state<=420; end 
 
16'd413:if ((pixels[555] <= 3) && ((pixels[555] <= 3) ^ key[208])==(pixels[555] <= 3)) begin state<=414; end  else begin state<=417; end 
 
16'd414:if ((pixels[466] <= 0) && ((pixels[466] <= 0) ~^ key[209])==(pixels[466] <= 0)) begin Label<=1; state<=0;ml_inference_completed<=1; end 
       else begin Label<=6; state<=0;ml_inference_completed<=1; end 

16'd417:if ((pixels[315] <= 29) && ((pixels[315] <= 29) ~^ key[210])==(pixels[315] <= 29)) begin Label<=2; state<=0;ml_inference_completed<=1; end 
       else begin Label<=6; state<=0;ml_inference_completed<=1; end 

16'd420:if ((pixels[381] <= 58) && ((pixels[381] <= 58) ^ key[211])==(pixels[381] <= 58)) begin state<=421; end  else begin state<=424; end 
 
16'd421:if ((pixels[188] <= 52) && ((pixels[188] <= 52) ~^ key[212])==(pixels[188] <= 52)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd424:if ((pixels[211] <= 72) && ((pixels[211] <= 72) ~^ key[213])==(pixels[211] <= 72)) begin Label<=5; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd427:if ((pixels[272] <= 6) && ((pixels[272] <= 6) ~^ key[214])==(pixels[272] <= 6)) begin state<=428; end  else begin state<=435; end 
 
16'd428:if ((pixels[349] <= 19) && ((pixels[349] <= 19) ~^ key[215])==(pixels[349] <= 19)) begin state<=429; end  else begin state<=432; end 
 
16'd429:if ((pixels[352] <= 148) && ((pixels[352] <= 148) ^ key[216])==(pixels[352] <= 148)) begin Label<=4; state<=0;ml_inference_completed<=1; end 
       else begin Label<=5; state<=0;ml_inference_completed<=1; end 

16'd432:if ((pixels[152] <= 4) && ((pixels[152] <= 4) ~^ key[217])==(pixels[152] <= 4)) begin Label<=6; state<=0;ml_inference_completed<=1; end 
       else begin Label<=2; state<=0;ml_inference_completed<=1; end 

16'd435:if ((pixels[319] <= 126) && ((pixels[319] <= 126) ^ key[218])==(pixels[319] <= 126)) begin state<=436; end  else begin state<=439; end 
 
16'd436:if ((pixels[637] <= 162) && ((pixels[637] <= 162) ^ key[219])==(pixels[637] <= 162)) begin Label<=2; state<=0;ml_inference_completed<=1; end 
       else begin Label<=4; state<=0;ml_inference_completed<=1; end 

16'd439:if ((pixels[468] <= 108) && ((pixels[468] <= 108) ~^ key[220])==(pixels[468] <= 108)) begin Label<=6; state<=0;ml_inference_completed<=1; end 
       else begin Label<=0; state<=0;ml_inference_completed<=1; end 

16'd442:if ((pixels[658] <= 16) && ((pixels[658] <= 16) ~^ key[221])==(pixels[658] <= 16)) begin state<=443; end  else begin state<=474; end 
 
16'd443:if ((pixels[345] <= 17) && ((pixels[345] <= 17) ~^ key[222])==(pixels[345] <= 17)) begin state<=444; end  else begin state<=459; end 
 
16'd444:if ((pixels[526] <= 1) && ((pixels[526] <= 1) ~^ key[223])==(pixels[526] <= 1)) begin state<=445; end  else begin state<=452; end 
 
16'd445:if ((pixels[541] <= 42) && ((pixels[541] <= 42) ~^ key[224])==(pixels[541] <= 42)) begin state<=446; end  else begin state<=449; end 
 
16'd446:if ((pixels[603] <= 205) && ((pixels[603] <= 205) ~^ key[225])==(pixels[603] <= 205)) begin Label<=7; state<=0;ml_inference_completed<=1; end 
       else begin Label<=1; state<=0;ml_inference_completed<=1; end 

16'd449:if ((pixels[320] <= 164) && ((pixels[320] <= 164) ^ key[226])==(pixels[320] <= 164)) begin Label<=2; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd452:if ((pixels[370] <= 11) && ((pixels[370] <= 11) ~^ key[227])==(pixels[370] <= 11)) begin state<=453; end  else begin state<=456; end 
 
16'd453:if ((pixels[284] <= 24) && ((pixels[284] <= 24) ~^ key[228])==(pixels[284] <= 24)) begin Label<=2; state<=0;ml_inference_completed<=1; end 
       else begin Label<=3; state<=0;ml_inference_completed<=1; end 

16'd456:if ((pixels[177] <= 136) && ((pixels[177] <= 136) ^ key[229])==(pixels[177] <= 136)) begin Label<=2; state<=0;ml_inference_completed<=1; end 
       else begin Label<=6; state<=0;ml_inference_completed<=1; end 

16'd459:if ((pixels[575] <= 231) && ((pixels[575] <= 231) ~^ key[230])==(pixels[575] <= 231)) begin state<=460; end  else begin state<=467; end 
 
16'd460:if ((pixels[210] <= 21) && ((pixels[210] <= 21) ^ key[231])==(pixels[210] <= 21)) begin state<=461; end  else begin state<=464; end 
 
16'd461:if ((pixels[406] <= 13) && ((pixels[406] <= 13) ~^ key[232])==(pixels[406] <= 13)) begin Label<=7; state<=0;ml_inference_completed<=1; end 
       else begin Label<=4; state<=0;ml_inference_completed<=1; end 

16'd464:if ((pixels[555] <= 9) && ((pixels[555] <= 9) ^ key[233])==(pixels[555] <= 9)) begin Label<=9; state<=0;ml_inference_completed<=1; end 
       else begin Label<=2; state<=0;ml_inference_completed<=1; end 

16'd467:if ((pixels[239] <= 110) && ((pixels[239] <= 110) ~^ key[234])==(pixels[239] <= 110)) begin state<=468; end  else begin state<=471; end 
 
16'd468:if ((pixels[624] <= 26) && ((pixels[624] <= 26) ^ key[235])==(pixels[624] <= 26)) begin Label<=6; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd471:if ((pixels[398] <= 99) && ((pixels[398] <= 99) ^ key[236])==(pixels[398] <= 99)) begin Label<=6; state<=0;ml_inference_completed<=1; end 
       else begin Label<=0; state<=0;ml_inference_completed<=1; end 

16'd474:if ((pixels[515] <= 2) && ((pixels[515] <= 2) ^ key[237])==(pixels[515] <= 2)) begin state<=475; end  else begin state<=490; end 
 
16'd475:if ((pixels[545] <= 15) && ((pixels[545] <= 15) ^ key[238])==(pixels[545] <= 15)) begin state<=476; end  else begin state<=483; end 
 
16'd476:if ((pixels[512] <= 45) && ((pixels[512] <= 45) ^ key[239])==(pixels[512] <= 45)) begin state<=477; end  else begin state<=480; end 
 
16'd477:if ((pixels[546] <= 166) && ((pixels[546] <= 166) ^ key[240])==(pixels[546] <= 166)) begin Label<=3; state<=0;ml_inference_completed<=1; end 
       else begin Label<=1; state<=0;ml_inference_completed<=1; end 

16'd480:if ((pixels[183] <= 11) && ((pixels[183] <= 11) ^ key[241])==(pixels[183] <= 11)) begin Label<=7; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd483:if ((pixels[713] <= 29) && ((pixels[713] <= 29) ~^ key[242])==(pixels[713] <= 29)) begin state<=484; end  else begin state<=487; end 
 
16'd484:if ((pixels[491] <= 233) && ((pixels[491] <= 233) ~^ key[243])==(pixels[491] <= 233)) begin Label<=8; state<=0;ml_inference_completed<=1; end 
       else begin Label<=1; state<=0;ml_inference_completed<=1; end 

16'd487:if ((pixels[374] <= 0) && ((pixels[374] <= 0) ~^ key[244])==(pixels[374] <= 0)) begin Label<=7; state<=0;ml_inference_completed<=1; end 
       else begin Label<=9; state<=0;ml_inference_completed<=1; end 

16'd490:if ((pixels[319] <= 0) && ((pixels[319] <= 0) ~^ key[245])==(pixels[319] <= 0)) begin state<=491; end  else begin state<=498; end 
 
16'd491:if ((pixels[344] <= 4) && ((pixels[344] <= 4) ~^ key[246])==(pixels[344] <= 4)) begin state<=492; end  else begin state<=495; end 
 
16'd492:if ((pixels[608] <= 7) && ((pixels[608] <= 7) ~^ key[247])==(pixels[608] <= 7)) begin Label<=7; state<=0;ml_inference_completed<=1; end 
       else begin Label<=2; state<=0;ml_inference_completed<=1; end 

16'd495:if ((pixels[122] <= 5) && ((pixels[122] <= 5) ~^ key[248])==(pixels[122] <= 5)) begin Label<=8; state<=0;ml_inference_completed<=1; end 
       else begin Label<=6; state<=0;ml_inference_completed<=1; end 

16'd498:if ((pixels[440] <= 68) && ((pixels[440] <= 68) ~^ key[249])==(pixels[440] <= 68)) begin state<=499; end  else begin state<=502; end 
 
16'd499:if ((pixels[267] <= 204) && ((pixels[267] <= 204) ~^ key[250])==(pixels[267] <= 204)) begin Label<=8; state<=0;ml_inference_completed<=1; end 
       else begin Label<=8; state<=0;ml_inference_completed<=1; end 

16'd502:if ((pixels[546] <= 148) && ((pixels[546] <= 148) ~^ key[251])==(pixels[546] <= 148)) begin Label<=8; state<=0;ml_inference_completed<=1; end 
       else begin Label<=3; state<=0;ml_inference_completed<=1; end 

        endcase
        end
    end




endmodule

module Binary_To_7Segment 
  (
   input       i_Clk,
	input [3:0] i_Binary_Num,
   output      o_Segment_A,
   output      o_Segment_B,
   output      o_Segment_C,
   output      o_Segment_D,
   output      o_Segment_E,
   output      o_Segment_F,
   output      o_Segment_G
   );
 
  reg [6:0]    r_Hex_Encoding = 7'h00;
   
  // Purpose: Creates a case statement for all possible input binary numbers.
  // Drives r_Hex_Encoding appropriately for each input combination.
  // Encoding at https://www.fpga4student.com/2017/09/seven-segment-led-display-controller-basys3-fpga.html
  always @(posedge i_Clk)
    begin
      case (i_Binary_Num)
        4'b0000 : r_Hex_Encoding <= 7'b0000001;
        4'b0001 : r_Hex_Encoding <= 7'b1001111;
        4'b0010 : r_Hex_Encoding <= 7'b0010010;
        4'b0011 : r_Hex_Encoding <= 7'b0000110;
        4'b0100 : r_Hex_Encoding <= 7'b1001100;         
        4'b0101 : r_Hex_Encoding <= 7'b0100100;
        4'b0110 : r_Hex_Encoding <= 7'b0100000;
        4'b0111 : r_Hex_Encoding <= 7'b0001111;
        4'b1000 : r_Hex_Encoding <= 7'b0000000;
        4'b1001 : r_Hex_Encoding <= 7'b0000100; 
		  4'b1010 : r_Hex_Encoding <= 7'b0001000; //a
		  4'b1011 : r_Hex_Encoding <= 7'b1100000; //b
		  4'b1100 : r_Hex_Encoding <= 7'b0110001;  //c
		  4'b1101 : r_Hex_Encoding <= 7'b1000010;  //d
		  4'b1110 : r_Hex_Encoding <= 7'b0110000;  //e
		  4'b1111 : r_Hex_Encoding <= 7'b0111000;  //f
        default: r_Hex_Encoding = 7'b1111111;
      endcase
    end // always @ (posedge i_Clk)
 
  // r_Hex_Encoding[7] is unused
  assign o_Segment_A = r_Hex_Encoding[6];
  assign o_Segment_B = r_Hex_Encoding[5];
  assign o_Segment_C = r_Hex_Encoding[4];
  assign o_Segment_D = r_Hex_Encoding[3];
  assign o_Segment_E = r_Hex_Encoding[2];
  assign o_Segment_F = r_Hex_Encoding[1];
  assign o_Segment_G = r_Hex_Encoding[0];
 
endmodule // Binary_To_7Segment



//////////////////////////////////////////////////////////////////////
// File Downloaded from http://www.nandland.com
//////////////////////////////////////////////////////////////////////
// This file contains the UART Receiver.  This receiver is able to
// receive 8 bits of serial data, one start bit, one stop bit,
// and no parity bit.  When receive is complete o_rx_dv will be
// driven high for one clock cycle.
// https://www.nandland.com/vhdl/modules/module-uart-serial-port-rs232.html
// Set Parameter CLKS_PER_BIT as follows:
// CLKS_PER_BIT = (Frequency of i_Clock)/(Frequency of UART)
// Example: 50 MHz Clock, 921600 baud UART
// (50000000)/(921600) = 53
  
module uart_rx   #(parameter CLKS_PER_BIT = 53)
  (
   input        i_Clock,
   input        i_Rx_Serial,
   output       o_Rx_DV,
   output [7:0] o_Rx_Byte
   );
    
  parameter s_IDLE         = 3'b000;
  parameter s_RX_START_BIT = 3'b001;
  parameter s_RX_DATA_BITS = 3'b010;
  parameter s_RX_STOP_BIT  = 3'b011; 
  parameter s_CLEANUP      = 3'b100;
   
  reg           r_Rx_Data_R = 1'b1;
  reg           r_Rx_Data   = 1'b1;
   
  reg [7:0]     r_Clock_Count = 0;
  reg [2:0]     r_Bit_Index   = 0; //8 bits total
  reg [7:0]     r_Rx_Byte     = 0;
  reg           r_Rx_DV       = 0;
  reg [2:0]     r_SM_Main     = 0;
   
  // Purpose: Double-register the incoming data.
  // This allows it to be used in the UART RX Clock Domain.
  // (It removes problems caused by metastability)
  always @(posedge i_Clock)
    begin
      r_Rx_Data_R <= i_Rx_Serial;
      r_Rx_Data   <= r_Rx_Data_R;
    end
   
   
  // Purpose: Control RX state machine
  always @(posedge i_Clock)
    begin
       
      case (r_SM_Main)
        s_IDLE :
          begin
            r_Rx_DV       <= 1'b0;
            r_Clock_Count <= 0;
            r_Bit_Index   <= 0;
             
            if (r_Rx_Data == 1'b0)          // Start bit detected
              r_SM_Main <= s_RX_START_BIT;
            else
              r_SM_Main <= s_IDLE;
          end
         
        // Check middle of start bit to make sure it's still low
        s_RX_START_BIT :
          begin
            if (r_Clock_Count == (CLKS_PER_BIT-1)/2)
              begin
                if (r_Rx_Data == 1'b0)
                  begin
                    r_Clock_Count <= 0;  // reset counter, found the middle
                    r_SM_Main     <= s_RX_DATA_BITS;
                  end
                else
                  r_SM_Main <= s_IDLE;
              end
            else
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_START_BIT;
              end
          end // case: s_RX_START_BIT
         
         
        // Wait CLKS_PER_BIT-1 clock cycles to sample serial data
        s_RX_DATA_BITS :
          begin
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_DATA_BITS;
              end
            else
              begin
                r_Clock_Count          <= 0;
                r_Rx_Byte[r_Bit_Index] <= r_Rx_Data;
                 
                // Check if we have received all bits
                if (r_Bit_Index < 7)
                  begin
                    r_Bit_Index <= r_Bit_Index + 1;
                    r_SM_Main   <= s_RX_DATA_BITS;
                  end
                else
                  begin
                    r_Bit_Index <= 0;
                    r_SM_Main   <= s_RX_STOP_BIT;
                  end
              end
          end // case: s_RX_DATA_BITS
     
     
        // Receive Stop bit.  Stop bit = 1
        s_RX_STOP_BIT :
          begin
            // Wait CLKS_PER_BIT-1 clock cycles for Stop bit to finish
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_STOP_BIT;
              end
            else
              begin
                r_Rx_DV       <= 1'b1;
                r_Clock_Count <= 0;
                r_SM_Main     <= s_CLEANUP;
              end
          end // case: s_RX_STOP_BIT
     
        // Stay here 1 clock
        s_CLEANUP :
          begin
            r_SM_Main <= s_IDLE;
            r_Rx_DV   <= 1'b0;
          end
         
         
        default :
          r_SM_Main <= s_IDLE;
         
      endcase
    end   
   
  assign o_Rx_DV   = r_Rx_DV;
  assign o_Rx_Byte = r_Rx_Byte;
   
endmodule // uart_rx


//////////////////////////////////////////////////////////////////////
// File Downloaded from http://www.nandland.com
//////////////////////////////////////////////////////////////////////
// This file contains the UART Transmitter.  This transmitter is able
// to transmit 8 bits of serial data, one start bit, one stop bit,
// and no parity bit.  When transmit is complete o_Tx_done will be
// driven high for one clock cycle.
//
// Set Parameter CLKS_PER_BIT as follows:
// CLKS_PER_BIT = (Frequency of i_Clock)/(Frequency of UART)
// Example: 50 MHz Clock, 921600 baud UART
// (50000000)/(921600) = 53
  
module uart_tx 
  #(parameter CLKS_PER_BIT = 53)
  (
   input       i_Clock,
   input       i_Tx_DV,
   input [7:0] i_Tx_Byte, 
   output      o_Tx_Active,
   output reg  o_Tx_Serial,
   output      o_Tx_Done
   );
  
  parameter s_IDLE         = 3'b000;
  parameter s_TX_START_BIT = 3'b001;
  parameter s_TX_DATA_BITS = 3'b010;
  parameter s_TX_STOP_BIT  = 3'b011;
  parameter s_CLEANUP      = 3'b100;
   
  reg [2:0]    r_SM_Main     = 0;
  reg [7:0]    r_Clock_Count = 0;
  reg [2:0]    r_Bit_Index   = 0;
  reg [7:0]    r_Tx_Data     = 0;
  reg          r_Tx_Done     = 0;
  reg          r_Tx_Active   = 0;
     
  always @(posedge i_Clock)
    begin
       
      case (r_SM_Main)
        s_IDLE :
          begin
            o_Tx_Serial   <= 1'b1;         // Drive Line High for Idle
            r_Tx_Done     <= 1'b0;
            r_Clock_Count <= 0;
            r_Bit_Index   <= 0;
             
            if (i_Tx_DV == 1'b1)
              begin
                r_Tx_Active <= 1'b1;
                r_Tx_Data   <= i_Tx_Byte;
                r_SM_Main   <= s_TX_START_BIT;
              end
            else
              r_SM_Main <= s_IDLE;
          end // case: s_IDLE
         
         
        // Send out Start Bit. Start bit = 0
        s_TX_START_BIT :
          begin
            o_Tx_Serial <= 1'b0;
             
            // Wait CLKS_PER_BIT-1 clock cycles for start bit to finish
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_TX_START_BIT;
              end
            else
              begin
                r_Clock_Count <= 0;
                r_SM_Main     <= s_TX_DATA_BITS;
              end
          end // case: s_TX_START_BIT
         
         
        // Wait CLKS_PER_BIT-1 clock cycles for data bits to finish         
        s_TX_DATA_BITS :
          begin
            o_Tx_Serial <= r_Tx_Data[r_Bit_Index];
             
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_TX_DATA_BITS;
              end
            else
              begin
                r_Clock_Count <= 0;
                 
                // Check if we have sent out all bits
                if (r_Bit_Index < 7)
                  begin
                    r_Bit_Index <= r_Bit_Index + 1;
                    r_SM_Main   <= s_TX_DATA_BITS;
                  end
                else
                  begin
                    r_Bit_Index <= 0;
                    r_SM_Main   <= s_TX_STOP_BIT;
                  end
              end
          end // case: s_TX_DATA_BITS
         
         
        // Send out Stop bit.  Stop bit = 1
        s_TX_STOP_BIT :
          begin
            o_Tx_Serial <= 1'b1;
             
            // Wait CLKS_PER_BIT-1 clock cycles for Stop bit to finish
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_TX_STOP_BIT;
              end
            else
              begin
                r_Tx_Done     <= 1'b1;
                r_Clock_Count <= 0;
                r_SM_Main     <= s_CLEANUP;
                r_Tx_Active   <= 1'b0;
              end
          end // case: s_Tx_STOP_BIT
         
         
        // Stay here 1 clock
        s_CLEANUP :
          begin
            r_Tx_Done <= 1'b1;
            r_SM_Main <= s_IDLE;
          end
         
         
        default :
          r_SM_Main <= s_IDLE;
         
      endcase
    end
 
  assign o_Tx_Active = r_Tx_Active;
  assign o_Tx_Done   = r_Tx_Done;
   
endmodule

